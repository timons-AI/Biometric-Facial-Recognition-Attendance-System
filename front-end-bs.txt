Directory Structure:
================================================================================
src/
    App.tsx
    index.css
    main.tsx
    vite-env.d.ts
    components/
        FaceCapture.tsx
        Navbar.tsx
    hooks/
        useSessionCheck.tsx
    pages/
        HomePage.tsx
        UnifiedLoginPage.tsx
        admin/
            ApprovalPage.tsx
            Dashboard.tsx
            Login.tsx
            Register.tsx
            RegisterStudent.tsx
            RegisterTeacher.tsx
        lecturer/
            Dashboard.tsx
            Login.tsx
        student/
            Dashboard.tsx
            LiveAttendancPage.tsx
            Login.tsx
            StartSession.tsx
    services/
        api.ts
        auth.ts
    store/
        auth.ts
        dashboardStore.ts
    types/
    utils/
        sessionManager.ts
================================================================================

File: App.tsx
--------------------------------------------------------------------------------
import React, { useEffect, useRef, lazy, Suspense } from "react";
import {
  Routes,
  Route,
  Navigate,
  useNavigate,
  BrowserRouter as Router,
} from "react-router-dom";
import { useAtom } from "jotai";
import { userAtom } from "./store/auth";
import AppNavbar from "./components/Navbar";
import { Spinner } from "@blueprintjs/core";
import { useSessionCheck } from "./hooks/useSessionCheck";
import StartSessionPage from "./pages/student/StartSession";
import UnifiedLoginPage from "./pages/UnifiedLoginPage";
import AdminApprovalPage from "./pages/admin/ApprovalPage";
import LiveAttendancePage from "./pages/student/LiveAttendancPage";

const HomePage = lazy(() => import("./pages/HomePage"));
const StudentLogin = lazy(() => import("./pages/student/Login"));
const LecturerLogin = lazy(() => import("./pages/lecturer/Login"));
const AdminLogin = lazy(() => import("./pages/admin/Login"));
const AdminRegister = lazy(() => import("./pages/admin/Register"));
const StudentDashboard = lazy(() => import("./pages/student/Dashboard"));
const LecturerDashboard = lazy(() => import("./pages/lecturer/Dashboard"));
const AdminDashboard = lazy(() => import("./pages/admin/Dashboard"));
const RegisterStudentPage = lazy(() => import("./pages/admin/RegisterStudent"));
const RegisterLecturerPage = lazy(
  () => import("./pages/admin/RegisterTeacher")
);

const App: React.FC = () => {
  const [user, setUser] = useAtom(userAtom);
  useSessionCheck();

  const PrivateRoute: React.FC<{
    element: React.ReactElement;
    allowedRoles: string[];
  }> = ({ element, allowedRoles }) => {
    if (!user) {
      return <Navigate to="/" />;
    }
    if (!allowedRoles.includes(user.role)) {
      return <Navigate to="/" />;
    }
    return element;
  };

  return (
    // <Router>
    <>
      <AppNavbar />
      <div className="flex flex-col items-center justify-center min-h-screen">
        <Suspense fallback={<Spinner />}>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/student/login" element={<StudentLogin />} />
            <Route path="/lecturer/login" element={<LecturerLogin />} />
            <Route path="/admin/login" element={<AdminLogin />} />
            <Route
              path="/student/start-session"
              element={
                <PrivateRoute
                  element={<StartSessionPage />}
                  allowedRoles={["student"]}
                />
              }
            />
            <Route
              path="/student/dashboard"
              element={
                <PrivateRoute
                  element={<StudentDashboard />}
                  allowedRoles={["student"]}
                />
              }
            />
            <Route
              path="/lecturer/dashboard"
              element={
                <PrivateRoute
                  element={<LecturerDashboard />}
                  allowedRoles={["lecturer"]}
                />
              }
            />
            <Route path="/admin/register" element={<AdminRegister />} />
            <Route
              path="/admin/dashboard"
              element={
                <PrivateRoute
                  element={<AdminDashboard />}
                  allowedRoles={["admin"]}
                />
              }
            />
            <Route path="/register" element={<RegisterStudentPage />} />
            <Route
              path="/admin/register-lecturer"
              element={
                <PrivateRoute
                  element={<RegisterLecturerPage />}
                  allowedRoles={["admin"]}
                />
              }
            />
            <Route path="*" element={<Navigate to="/" />} />
            <Route
              path="/admin/approve-studentsl"
              element={<AdminApprovalPage />}
            />
            <Route path="/login" element={<UnifiedLoginPage />} />
            <Route path="/live-attendance" element={<LiveAttendancePage />} />
          </Routes>
        </Suspense>
      </div>
    </>
    // </Router>
  );
};

export default App;

================================================================================

File: index.css
--------------------------------------------------------------------------------
@import "normalize.css";
@import "@blueprintjs/core/lib/css/blueprint.css";
@import "@blueprintjs/icons/lib/css/blueprint-icons.css";
@import "@blueprintjs/table/lib/css/table.css";
@import "@blueprintjs/select/lib/css/blueprint-select.css";

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';


body {
  margin: 0;
  
  min-width: 320px;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;

}

#root {
  width: 100%;
  height: 100%;
  

}
================================================================================

File: main.tsx
--------------------------------------------------------------------------------
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import { BrowserRouter, Router } from "react-router-dom";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <BrowserRouter>
      {/* <Router> */}
      <App />
      {/* </Router> */}
    </BrowserRouter>
  </React.StrictMode>
);

================================================================================

File: vite-env.d.ts
--------------------------------------------------------------------------------
/// <reference types="vite/client" />

================================================================================

File: components\FaceCapture.tsx
--------------------------------------------------------------------------------
// components/FaceCapture.tsx
import React, { useRef, useState, useEffect } from "react";
import { Button, Card, H5, Intent } from "@blueprintjs/core";

interface FaceCaptureProps {
  onCapture: (images: File[]) => void;
  singleCapture?: boolean;
}

const FaceCapture: React.FC<FaceCaptureProps> = ({
  onCapture,
  singleCapture = false,
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [capturedImages, setCapturedImages] = useState<File[]>([]);

  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  const startCamera = async () => {
    try {
      const s = await navigator.mediaDevices.getUserMedia({ video: true });
      setStream(s);
      if (videoRef.current) {
        videoRef.current.srcObject = s;
      }
    } catch (error) {
      console.error("Error accessing camera:", error);
    }
  };

  const captureImage = () => {
    if (videoRef.current) {
      const canvas = document.createElement("canvas");
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      canvas.getContext("2d")?.drawImage(videoRef.current, 0, 0);
      canvas.toBlob((blob) => {
        if (blob) {
          const file = new File([blob], `captured-image-${Date.now()}.jpg`, {
            type: "image/jpeg",
          });
          const newImages = [...capturedImages, file];
          setCapturedImages(newImages);
          onCapture(newImages);
          console.log(`Captured image: ${file.name}, size: ${file.size} bytes`);
          if (singleCapture) {
            stopCamera();
          }
        }
      }, "image/jpeg");
    }
  };

  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      setStream(null);
    }
  };

  const removeImage = (index: number) => {
    const newImages = capturedImages.filter((_, i) => i !== index);
    setCapturedImages(newImages);
    onCapture(newImages);
  };

  return (
    <div>
      <video
        ref={videoRef}
        autoPlay
        style={{ width: "100%", maxWidth: "500px" }}
      />
      <div className=" p-2 gap-1 flex">
        <Button
          onClick={startCamera}
          disabled={!!stream}
          intent={Intent.PRIMARY}
        >
          Start Camera
        </Button>
        <Button
          onClick={captureImage}
          disabled={!stream}
          intent={Intent.SUCCESS}
        >
          Capture
        </Button>
        <Button onClick={stopCamera} disabled={!stream} intent={Intent.DANGER}>
          Stop Camera
        </Button>
      </div>
      <div style={{ marginTop: "20px" }}>
        <H5>Captured Images:</H5>
        <div style={{ display: "flex", flexWrap: "wrap" }}>
          {capturedImages.map((image, index) => (
            <Card key={index} style={{ margin: "10px", width: "150px" }}>
              <img
                src={URL.createObjectURL(image)}
                alt={`Captured ${index}`}
                style={{ width: "100%" }}
              />
              <Button
                onClick={() => removeImage(index)}
                intent={Intent.DANGER}
                small
              >
                Remove
              </Button>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
};

export default FaceCapture;

================================================================================

File: components\Navbar.tsx
--------------------------------------------------------------------------------
// src/components/Navbar.tsx

import React from "react";
import { Link, useNavigate } from "react-router-dom";
import {
  Navbar,
  Button,
  Alignment,
  Menu,
  MenuItem,
  Popover,
  Position,
} from "@blueprintjs/core";
import { useAtom } from "jotai";
import { userAtom } from "../store/auth";
import { logout } from "../services/auth";

const AppNavbar: React.FC = () => {
  const [user, setUser] = useAtom(userAtom);
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    setUser(null);
    navigate("/login");
  };

  const renderMenu = () => {
    if (!user) {
      return (
        <Button icon="log-in" text="Login" onClick={() => navigate("/login")} />
      );
    }

    let menuItems;
    switch (user.role) {
      case "student":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/student/dashboard")}
            />
            <MenuItem
              icon="calendar"
              text="My Schedule"
              onClick={() => navigate("/student/schedule")}
            />
            <MenuItem
              icon="chart"
              text="Attendance Report"
              onClick={() => navigate("/student/attendance")}
            />
          </Menu>
        );
        break;
      case "lecturer":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/lecturer/dashboard")}
            />
            <MenuItem
              icon="people"
              text="My Courses"
              onClick={() => navigate("/lecturer/courses")}
            />
            <MenuItem
              icon="take-action"
              text="Mark Attendance"
              onClick={() => navigate("/lecturer/mark-attendance")}
            />
          </Menu>
        );
        break;
      case "admin":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/admin/dashboard")}
            />
            <MenuItem
              icon="new-person"
              text="Register User"
              onClick={() => navigate("/admin/register")}
            />
            <MenuItem
              icon="confirm"
              text="Approve Students"
              onClick={() => navigate("/admin/approve-students")}
            />
            <MenuItem
              icon="properties"
              text="Manage Courses"
              onClick={() => navigate("/admin/manage-courses")}
            />
          </Menu>
        );
        break;
    }

    return (
      <Popover content={menuItems} position={Position.BOTTOM_RIGHT}>
        <Button icon="user" rightIcon="caret-down" text={user.name} />
      </Popover>
    );
  };

  return (
    <Navbar>
      <Navbar.Group align={Alignment.LEFT}>
        <Navbar.Heading>Attendance System</Navbar.Heading>
        <Navbar.Divider />
        <Button icon="home" text="Home" minimal onClick={() => navigate("/")} />
        <Button
          icon="user"
          text="Attendance Live"
          minimal
          onClick={() => navigate("/live-attendance")}
        />
        <Button
          icon="add"
          text="Register"
          minimal
          onClick={() => navigate("/register")}
        />
      </Navbar.Group>
      <Navbar.Group align={Alignment.RIGHT}>
        {renderMenu()}
        {user && <Button icon="log-out" text="Logout" onClick={handleLogout} />}
      </Navbar.Group>
    </Navbar>
  );
};

export default AppNavbar;

================================================================================

File: hooks\useSessionCheck.tsx
--------------------------------------------------------------------------------
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAtom } from "jotai";

import { userAtom } from "../store/auth";
import { checkSessionExpiration, useLogout } from "../utils/sessionManager";

export function useSessionCheck() {
  const [user, setUser] = useAtom(userAtom);
  const navigate = useNavigate();
  const logout = useLogout();
  const [sessionExpired, setSessionExpired] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const userData = localStorage.getItem("user");

    if (token && userData) {
      try {
        const parsedUser = JSON.parse(userData);
        setUser({
          id: parsedUser.id,
          role: parsedUser.role,
          name: parsedUser.name,
          token: token,
        });
      } catch (error) {
        console.error("Error parsing user data:", error);
        localStorage.removeItem("token");
        localStorage.removeItem("user");
      }
    }

    const checkSession = () => {
      if (checkSessionExpiration()) {
        setSessionExpired(true);
      }
    };

    checkSession(); // Check immediately
    const checkInterval = window.setInterval(checkSession, 60000); // Check every minute

    return () => {
      clearInterval(checkInterval);
    };
  }, [setUser]);

  useEffect(() => {
    if (sessionExpired) {
      logout();
      navigate("/");
    }
  }, [sessionExpired, logout, navigate]);

  return sessionExpired;
}

================================================================================

File: pages\HomePage.tsx
--------------------------------------------------------------------------------
import React from "react";
import { H1 } from "@blueprintjs/core";
const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen  flex flex-col items-center justify-center">
      <main className="flex-grow container mx-auto px-4 py-16 text-center">
        <H1 className="text-4xl font-bold mb-4">
          Welcome to the Attendance System
        </H1>
        <p className="text-xl mb-8">
          {" "}
          This is the University Attendance System. It's a system that allows
          students to log in and view their attendance records. Lecturers can
          also log in to mark attendance for their classes. Admins can manage
          students, lecturers, and courses.
        </p>
      </main>
      <footer className="w-full bg-gray-800 text-white py-4">
        <div className="container mx-auto px-4 text-center">
          <p>&copy; 2024 University Attendance System. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
};

export default HomePage;

================================================================================

File: pages\UnifiedLoginPage.tsx
--------------------------------------------------------------------------------
// src/pages/LoginPage.tsx

import React, { useState } from "react";
import { useSetAtom } from "jotai";
import { useNavigate } from "react-router-dom";
import {
  Card,
  FormGroup,
  InputGroup,
  Button,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { userAtom } from "../store/auth";
import { login } from "../services/api";

const LoginPage: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const setUser = useSetAtom(userAtom);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    try {
      const userData = await login(email, password);
      setUser(userData);
      localStorage.setItem("token", userData.access_token);
      localStorage.setItem("user", JSON.stringify(userData));

      switch (userData.role) {
        case "student":
          navigate("/student/dashboard");
          break;
        case "lecturer":
          navigate("/lecturer/dashboard");
          break;
        case "admin":
          navigate("/admin/dashboard");
          break;
        default:
          navigate("/dashboard");
      }
    } catch (error) {
      setError(
        error instanceof Error ? error.message : "An unexpected error occurred"
      );
    }
  };

  return (
    <Card>
      <h2>Login</h2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <form onSubmit={handleSubmit}>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </FormGroup>
        <Button type="submit" intent={Intent.PRIMARY}>
          Login
        </Button>
      </form>
    </Card>
  );
};

export default LoginPage;

================================================================================

File: pages\admin\ApprovalPage.tsx
--------------------------------------------------------------------------------
// src/pages/admin/ApprovalPage.tsx

import React, { useEffect, useState } from "react";
import { Card, H2, Button, HTMLTable } from "@blueprintjs/core";
import {
  getStudentsForApproval,
  approveStudent,
  rejectStudent,
} from "../../services/api";

interface PendingStudent {
  student_id: string;
  name: string;
  email: string;
}

const AdminApprovalPage: React.FC = () => {
  const [pendingStudents, setPendingStudents] = useState<PendingStudent[]>([]);

  useEffect(() => {
    fetchPendingStudents();
  }, []);

  const fetchPendingStudents = async () => {
    const students = await getStudentsForApproval();
    setPendingStudents(students);
  };

  const handleApprove = async (studentId: string) => {
    await approveStudent(studentId);
    fetchPendingStudents();
  };

  const handleReject = async (studentId: string) => {
    await rejectStudent(studentId);
    fetchPendingStudents();
  };

  return (
    <Card>
      <H2>Student Approval</H2>
      <HTMLTable>
        <thead>
          <tr>
            <th>Student ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {pendingStudents.map((student) => (
            <tr key={student.student_id}>
              <td>{student.student_id}</td>
              <td>{student.name}</td>
              <td>{student.email}</td>
              <td>
                <Button
                  intent="success"
                  onClick={() => handleApprove(student.student_id)}
                >
                  Approve
                </Button>
                <Button
                  intent="danger"
                  onClick={() => handleReject(student.student_id)}
                >
                  Reject
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </HTMLTable>
    </Card>
  );
};

export default AdminApprovalPage;

================================================================================

File: pages\admin\Dashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect, useCallback } from "react";
import {
  Card,
  H2,
  H3,
  Button,
  HTMLTable,
  Spinner,
  Intent,
  Dialog,
  FormGroup,
  InputGroup,
  Section,
  SectionCard,
  DialogBody,
  DialogFooter,
  Tag,
} from "@blueprintjs/core";
import { Cell, Column, Table2 } from "@blueprintjs/table";
import { Bar, Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import {
  fetchAdminDashboardData,
  registerLecturer,
  addCourse,
  addTimetableEntry,
} from "../../services/api";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

interface Student {
  student_id: string;
  name: string;
  email: string;
  total_sessions: number;
}

interface Lecturer {
  lecturer_id: string;
  name: string;
  email: string;
  courses_count: number;
}

interface Course {
  course_id: string;
  course_name: string;
  lecturer_name: string;
  students_count: number;
}

interface AttendanceStats {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string;
  }[];
}

export interface AdminDashboardData {
  totalStudents: number;
  totalLecturers: number;
  totalCourses: number;
  recentStudents: Student[];
  topLecturers: Lecturer[];
  popularCourses: Course[];
  attendanceStats: AttendanceStats;
  courseDistribution: AttendanceStats;
}

const AdminDashboard: React.FC = () => {
  const [data, setData] = useState<AdminDashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [isAddLecturerOpen, setIsAddLecturerOpen] = useState(false);
  const [isAddCourseOpen, setIsAddCourseOpen] = useState(false);
  const [isAddTimetableOpen, setIsAddTimetableOpen] = useState(false);

  const loadData = useCallback(async () => {
    if (!data) {
      // Only fetch if data is not already loaded
      try {
        setLoading(true);
        const dashboardData = await fetchAdminDashboardData(); // or fetchTeacherDashboardData
        setData(dashboardData);
      } catch (error) {
        console.error("Failed to fetch dashboard data:", error);
      } finally {
        setLoading(false);
      }
    }
  }, [data]); // Add data as a dependency

  useEffect(() => {
    loadData();
  }, [loadData]);

  const handleAddLecturer = async (
    name: string,
    email: string,
    password: string
  ) => {
    try {
      await registerLecturer(name, email, password);
      setData(null); // Reset data to trigger a re-fetch
      loadData(); // Re-fetch data
      setIsAddLecturerOpen(false);
    } catch (error) {
      console.error("Failed to add lecturer:", error);
    }
  };

  // Apply similar changes to handleAddCourse and handleAddTimetable
  const handleAddCourse = async (courseName: string, lecturerId: string) => {
    try {
      await addCourse(courseName, lecturerId);
      setData(null);
      loadData();
      setIsAddCourseOpen(false);
    } catch (error) {
      console.error("Failed to add course:", error);
    }
  };

  const handleAddTimetable = async (
    courseId: string,
    day: string,
    startTime: string,
    endTime: string
  ) => {
    try {
      await addTimetableEntry(courseId, day, startTime, endTime);
      setData(null);
      loadData();
      setIsAddTimetableOpen(false);
    } catch (error) {
      console.error("Failed to add timetable entry:", error);
    }
  };

  if (loading) {
    return <Spinner />;
  }

  if (!data) {
    return <div>Failed to load dashboard data.</div>;
  }
  return (
    <div className="grid gap-2">
      <H2>Admin Dashboard</H2>

      <Section title="Dashboard Summary" elevation={1}>
        <SectionCard>
          <H3>Total Students</H3>
          <Tag>{data.totalStudents}</Tag>
        </SectionCard>
        <SectionCard>
          <H3>Total Lecturers</H3>
          <Tag intent="primary">{data.totalLecturers}</Tag>
        </SectionCard>
        <SectionCard>
          <H3>Total Courses</H3>
          <Tag intent="success">{data.totalCourses}</Tag>
        </SectionCard>
      </Section>

      <Section
        title="Recent Students"
        elevation={1}
        collapsible={true}
        icon="user"
      >
        <Table2 numRows={data.recentStudents.length}>
          <Column
            name="Student ID"
            cellRenderer={(rowIndex) => (
              <Cell>{data.recentStudents[rowIndex].student_id}</Cell>
            )}
          />
          <Column
            name="Name"
            cellRenderer={(rowIndex) => (
              <Cell>{data.recentStudents[rowIndex].name}</Cell>
            )}
          />
          <Column
            name="Email"
            cellRenderer={(rowIndex) => (
              <Cell>{data.recentStudents[rowIndex].email}</Cell>
            )}
          />
          <Column
            name="Total Sessions"
            cellRenderer={(rowIndex) => (
              <Cell>{data.recentStudents[rowIndex].total_sessions}</Cell>
            )}
          />
        </Table2>
      </Section>

      <Section
        title="Top Lecturers"
        elevation={1}
        collapsible={true}
        icon="people"
      >
        <HTMLTable>
          <thead>
            <tr>
              <th>Lecturer ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Courses Count</th>
            </tr>
          </thead>
          <tbody>
            {data.topLecturers.map((lecturer) => (
              <tr key={lecturer.lecturer_id}>
                <td>{lecturer.lecturer_id}</td>
                <td>{lecturer.name}</td>
                <td>{lecturer.email}</td>
                <td>{lecturer.courses_count}</td>
              </tr>
            ))}
          </tbody>
        </HTMLTable>
      </Section>

      <Section
        title="Popular Courses"
        elevation={1}
        collapsible={true}
        icon="book"
      >
        <HTMLTable>
          <thead>
            <tr>
              <th>Course ID</th>
              <th>Course Name</th>
              <th>Lecturer</th>
              <th>Students Count</th>
            </tr>
          </thead>
          <tbody>
            {data.popularCourses.map((course) => (
              <tr key={course.course_id}>
                <td>{course.course_id}</td>
                <td>{course.course_name}</td>
                <td>{course.lecturer_name}</td>
                <td>{course.students_count}</td>
              </tr>
            ))}
          </tbody>
        </HTMLTable>
      </Section>

      <Section
        title="Attendance Statistics"
        elevation={1}
        collapsible={true}
        icon="chart"
      >
        <Bar data={data.attendanceStats} />
      </Section>

      <Section
        title="Course Distribution"
        elevation={1}
        collapsible={true}
        className=" h-[300px]"
        icon="pie-chart"
      >
        {/* <Doughnut data={data.courseDistribution} /> */}
        {/* <Doughnut data={data.courseDistribution} /> */}
        <Doughnut
          data={data.courseDistribution}
          options={{
            responsive: true,
            maintainAspectRatio: false,
          }}
        />
      </Section>
      <Section title="Admin Actions" elevation={1}>
        <SectionCard className=" gap-1 flex">
          <Button
            intent={Intent.PRIMARY}
            text="Add Lecturer"
            onClick={() => setIsAddLecturerOpen(true)}
          />
          <Button
            intent={Intent.PRIMARY}
            text="Add Course"
            onClick={() => setIsAddCourseOpen(true)}
          />
          <Button
            intent={Intent.PRIMARY}
            text="Add Timetable Entry"
            onClick={() => setIsAddTimetableOpen(true)}
          />
        </SectionCard>
      </Section>

      {/* Updated Dialog components */}
      <Dialog
        isOpen={isAddLecturerOpen}
        onClose={() => setIsAddLecturerOpen(false)}
        title="Add Lecturer"
        icon="add"
      >
        <DialogBody>
          <FormGroup label="Name" labelFor="lecturer-name">
            <InputGroup id="lecturer-name" placeholder="Enter lecturer name" />
          </FormGroup>
          <FormGroup label="Email" labelFor="lecturer-email">
            <InputGroup
              id="lecturer-email"
              placeholder="Enter lecturer email"
            />
          </FormGroup>
          <FormGroup label="Password" labelFor="lecturer-password">
            <InputGroup
              id="lecturer-password"
              type="password"
              placeholder="Enter password"
            />
          </FormGroup>
        </DialogBody>
        <DialogFooter
          actions={
            <>
              <Button
                text="Cancel"
                onClick={() => setIsAddLecturerOpen(false)}
              />
              <Button
                intent={Intent.PRIMARY}
                text="Add Lecturer"
                onClick={() => {
                  const name = (
                    document.getElementById("lecturer-name") as HTMLInputElement
                  ).value;
                  const email = (
                    document.getElementById(
                      "lecturer-email"
                    ) as HTMLInputElement
                  ).value;
                  const password = (
                    document.getElementById(
                      "lecturer-password"
                    ) as HTMLInputElement
                  ).value;
                  handleAddLecturer(name, email, password);
                }}
              />
            </>
          }
        />
      </Dialog>

      <Dialog
        isOpen={isAddCourseOpen}
        onClose={() => setIsAddCourseOpen(false)}
        title="Add Course"
        icon="book"
      >
        <DialogBody>
          <FormGroup label="Course Name" labelFor="course-name">
            <InputGroup id="course-name" placeholder="Enter course name" />
          </FormGroup>
          <FormGroup label="Lecturer ID" labelFor="lecturer-id">
            <InputGroup id="lecturer-id" placeholder="Enter lecturer ID" />
          </FormGroup>
        </DialogBody>
        <DialogFooter
          actions={
            <>
              <Button text="Cancel" onClick={() => setIsAddCourseOpen(false)} />
              <Button
                intent={Intent.PRIMARY}
                text="Add Course"
                onClick={() => {
                  const courseName = (
                    document.getElementById("course-name") as HTMLInputElement
                  ).value;
                  const lecturerId = (
                    document.getElementById("lecturer-id") as HTMLInputElement
                  ).value;
                  handleAddCourse(courseName, lecturerId);
                }}
              />
            </>
          }
        />
      </Dialog>

      <Dialog
        isOpen={isAddTimetableOpen}
        onClose={() => setIsAddTimetableOpen(false)}
        title="Add Timetable Entry"
        icon="calendar"
      >
        <DialogBody>
          <FormGroup label="Course ID" labelFor="timetable-course-id">
            <InputGroup
              id="timetable-course-id"
              placeholder="Enter course ID"
            />
          </FormGroup>
          <FormGroup label="Day" labelFor="timetable-day">
            <InputGroup
              id="timetable-day"
              placeholder="Enter day (e.g., Monday)"
            />
          </FormGroup>
          <FormGroup label="Start Time" labelFor="timetable-start-time">
            <InputGroup
              id="timetable-start-time"
              placeholder="Enter start time (HH:MM)"
            />
          </FormGroup>
          <FormGroup label="End Time" labelFor="timetable-end-time">
            <InputGroup
              id="timetable-end-time"
              placeholder="Enter end time (HH:MM)"
            />
          </FormGroup>
        </DialogBody>
        <DialogFooter
          actions={
            <>
              <Button
                text="Cancel"
                onClick={() => setIsAddTimetableOpen(false)}
              />
              <Button
                intent={Intent.PRIMARY}
                text="Add Timetable Entry"
                onClick={() => {
                  const courseId = (
                    document.getElementById(
                      "timetable-course-id"
                    ) as HTMLInputElement
                  ).value;
                  const day = (
                    document.getElementById("timetable-day") as HTMLInputElement
                  ).value;
                  const startTime = (
                    document.getElementById(
                      "timetable-start-time"
                    ) as HTMLInputElement
                  ).value;
                  const endTime = (
                    document.getElementById(
                      "timetable-end-time"
                    ) as HTMLInputElement
                  ).value;
                  handleAddTimetable(courseId, day, startTime, endTime);
                }}
              />
            </>
          }
        />
      </Dialog>
    </div>
  );
};

export default AdminDashboard;

================================================================================

File: pages\admin\Login.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import { useSetAtom } from "jotai";
import { useNavigate } from "react-router-dom";
import {
  Button,
  Card,
  FormGroup,
  H2,
  InputGroup,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { loginAdmin } from "../../services/auth";
import { userAtom } from "../../store/auth";
// import { toast } from 'react-toastify';

const AdminLogin: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const setUser = useSetAtom(userAtom);
  const navigate = useNavigate();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      const userData = await loginAdmin(email, password);
      setUser({
        id: userData.id,
        role: userData.role,
        name: userData.name,
        token: userData.access_token,
      });
      localStorage.setItem("token", userData.access_token);
      localStorage.setItem(
        "user",
        JSON.stringify({
          id: userData.id,
          role: userData.role,
          name: userData.name,
        })
      );
      // toast.success("Login successful!");
      console.log("Login successful!");
      navigate("/admin/dashboard");
    } catch (error) {
      console.error("Login failed:", error);
      setError("Login failed. Please check your credentials and try again.");
      // toast.error("Login failed. Please try again.");
      console.log("Login failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card>
      <H2>Admin Login</H2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <form onSubmit={handleLogin}>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </FormGroup>
        <Button type="submit" fill intent={Intent.PRIMARY} loading={isLoading}>
          Log In
        </Button>
      </form>
    </Card>
  );
};

export default AdminLogin;

================================================================================

File: pages\admin\Register.tsx
--------------------------------------------------------------------------------
// src/pages/admin/AdminRegistration.tsx

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Card,
  FormGroup,
  InputGroup,
  Button,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { registerAdmin } from "../../services/api";

const AdminRegistration: React.FC = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (!name || !email || !password) {
      setError("All fields are required");
      return;
    }

    try {
      await registerAdmin(name, email, password);
      setSuccess("Admin registered successfully");
      // Optionally, redirect to admin dashboard or login page
      setTimeout(() => navigate("/admin/dashboard"), 2000);
    } catch (error) {
      setError(error instanceof Error ? error.message : "Registration failed");
    }
  };

  return (
    <Card elevation={2} className="admin-registration">
      <h2>Register New Admin</h2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      {success && <Callout intent={Intent.SUCCESS}>{success}</Callout>}
      <form onSubmit={handleSubmit}>
        <FormGroup label="Name" labelFor="name-input" labelInfo="(required)">
          <InputGroup
            id="name-input"
            placeholder="Enter full name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </FormGroup>
        <FormGroup label="Email" labelFor="email-input" labelInfo="(required)">
          <InputGroup
            id="email-input"
            type="email"
            placeholder="Enter email address"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </FormGroup>
        <FormGroup
          label="Password"
          labelFor="password-input"
          labelInfo="(required)"
        >
          <InputGroup
            id="password-input"
            type="password"
            placeholder="Enter password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </FormGroup>
        <Button type="submit" intent={Intent.PRIMARY} text="Register Admin" />
      </form>
    </Card>
  );
};

export default AdminRegistration;

================================================================================

File: pages\admin\RegisterStudent.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import {
  Card,
  Button,
  Intent,
  Callout,
  FormGroup,
  InputGroup,
  HTMLSelect,
} from "@blueprintjs/core";
import { registerStudent } from "../../services/api";
import FaceCapture from "../../components/FaceCapture";

interface Student {
  student_id: string;
  name: string;
  email: string;
  password: string;
}

const RegisterStudentPage: React.FC = () => {
  const [studentData, setStudentData] = useState<Student>({
    student_id: "",
    name: "",
    email: "",
    password: "",
  });
  const [images, setImages] = useState<File[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [academicYear, setAcademicYear] = useState("");
  const [college, setCollege] = useState("");
  const [group, setGroup] = useState("");
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setStudentData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    setError(null);
    // setLoading(true);

    if (images.length < 1) {
      setError("Please capture at least one image of the student.");
      return;
    }

    if (!studentData.password) {
      setError("Please enter a password for the student.");
      return;
    }

    try {
      setLoading(true);
      await registerStudent(studentData, images);
      setStudentData({ student_id: "", name: "", email: "", password: "" });
      setImages([]);
      setLoading(false);
      alert("Student registered successfully!");
    } catch (error: any) {
      setLoading(false);
      setError(
        error.response?.data?.error ||
          "Failed to register student. Please try again."
      );
    }
  };

  return (
    <Card className=" w-2/3 m-2">
      <h2>Register New Student</h2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <Callout className=" m-2" intent={Intent.WARNING}>
        Timetable assignment is currently under construction. The following
        fields will be used for automatic timetable assignment in the future.
      </Callout>
      <form onSubmit={handleSubmit}>
        <FormGroup
          label="Student ID"
          labelFor="student_id-input"
          labelInfo="(required)"
        >
          <InputGroup
            leftIcon="id-number"
            id="student_id-input"
            name="student_id"
            placeholder="Enter student ID"
            value={studentData.student_id}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Name" labelFor="name-input" labelInfo="(required)">
          <InputGroup
            leftIcon="user"
            id="name-input"
            name="name"
            placeholder="Enter full name"
            value={studentData.name}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Email" labelFor="email-input" labelInfo="(required)">
          <InputGroup
            leftIcon="envelope"
            id="email-input"
            name="email"
            placeholder="Enter email address"
            value={studentData.email}
            onChange={handleInputChange}
            type="email"
            required
          />
        </FormGroup>
        <FormGroup
          label="Password"
          labelFor="password-input"
          labelInfo="(required)"
        >
          <InputGroup
            leftIcon="lock"
            id="password-input"
            name="password"
            placeholder="Enter password"
            value={studentData.password}
            onChange={handleInputChange}
            type="password"
            required
          />
        </FormGroup>
        <FormGroup label="Student Image" labelFor="image-capture">
          <FaceCapture onCapture={setImages} />
        </FormGroup>
        <FormGroup label="Academic Year" labelFor="academic-year-input">
          <HTMLSelect
            id="academic-year-input"
            value={academicYear}
            onChange={(e) => setAcademicYear(e.target.value)}
            disabled
          >
            <option value="">Select Academic Year</option>
            <option value="1">First Year</option>
            <option value="2">Second Year</option>
            <option value="3">Third Year</option>
            <option value="4">Fourth Year</option>
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="College" labelFor="college-input">
          <HTMLSelect
            id="college-input"
            value={college}
            onChange={(e) => setCollege(e.target.value)}
            disabled
          >
            <option value="">Select College</option>
            <option value="engineering">College of Engineering</option>
            <option value="science">College of Science</option>
            <option value="business">College of Business</option>
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Group" labelFor="group-input">
          <HTMLSelect
            id="group-input"
            value={group}
            onChange={(e) => setGroup(e.target.value)}
            disabled
          >
            <option value="">Select Group</option>
            <option value="A">Group A</option>
            <option value="B">Group B</option>
            <option value="C">Group C</option>
          </HTMLSelect>
        </FormGroup>
        <Button
          type="submit"
          intent={Intent.PRIMARY}
          loading={loading}
          text="Register Student"
          disabled={
            !studentData.student_id ||
            !studentData.name ||
            !studentData.email ||
            images.length < 1
          }
        />
      </form>
    </Card>
  );
};

export default RegisterStudentPage;

================================================================================

File: pages\admin\RegisterTeacher.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import {
  Card,
  Button,
  Intent,
  Callout,
  FormGroup,
  InputGroup,
} from "@blueprintjs/core";
import { registerLecturer } from "../../services/api";

interface Lecturer {
  name: string;
  email: string;
  password: string;
}

const RegisterLecturerPage: React.FC = () => {
  const [lecturerData, setLecturerData] = useState<Lecturer>({
    name: "",
    email: "",
    password: "",
  });
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setLecturerData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setError(null);

    try {
      await registerLecturer(lecturerData);
      setLecturerData({ name: "", email: "", password: "" });
      alert("Lecturer registered successfully!");
    } catch (error: any) {
      setError(
        error.response?.data?.error ||
          "Failed to register lecturer. Please try again."
      );
    }
  };

  return (
    <Card>
      <h2>Register New Lecturer</h2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <form onSubmit={handleSubmit}>
        <FormGroup label="Name" labelFor="name-input" labelInfo="(required)">
          <InputGroup
            id="name-input"
            name="name"
            placeholder="Enter full name"
            value={lecturerData.name}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Email" labelFor="email-input" labelInfo="(required)">
          <InputGroup
            id="email-input"
            name="email"
            placeholder="Enter email address"
            value={lecturerData.email}
            onChange={handleInputChange}
            type="email"
            required
          />
        </FormGroup>
        <FormGroup
          label="Password"
          labelFor="password-input"
          labelInfo="(required)"
        >
          <InputGroup
            id="password-input"
            name="password"
            placeholder="Enter password"
            value={lecturerData.password}
            onChange={handleInputChange}
            type="password"
            required
          />
        </FormGroup>
        <Button
          type="submit"
          intent={Intent.PRIMARY}
          text="Register Lecturer"
          disabled={
            !lecturerData.name || !lecturerData.email || !lecturerData.password
          }
        />
      </form>
    </Card>
  );
};

export default RegisterLecturerPage;

================================================================================

File: pages\lecturer\Dashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect, useCallback } from "react";
import {
  Card,
  H2,
  H3,
  Button,
  HTMLTable,
  Spinner,
  Intent,
  Callout,
  Section,
  SectionCard,
  Dialog,
} from "@blueprintjs/core";
import { Cell, Column, Table2 } from "@blueprintjs/table";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { fetchTeacherDashboardData } from "../../services/api";
import { QRCodeSVG } from "qrcode.react";
import { endAllTeacherSessions } from "../../services/api";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface Student {
  student_id: string;
  name: string;
  email: string;
  status: "active" | "inactive";
}

interface Course {
  course_id: string;
  course_name: string;
  active_students: number;
  total_students: number;
}

interface TimetableEntry {
  day: string;
  start_time: string;
  end_time: string;
  course_name: string;
}

export interface TeacherDashboardData {
  activeStudents: Student[];
  courses: Course[];
  timetable: TimetableEntry[];
  attendanceStats: {
    labels: string[];
    datasets: {
      label: string;
      data: number[];
      backgroundColor: string;
    }[];
  };
}

const TeacherDashboard: React.FC = () => {
  const [isQRDialogOpen, setIsQRDialogOpen] = useState(false);
  const [endSessionsQRCode, setEndSessionsQRCode] = useState("");

  const handleEndAllSessions = async () => {
    try {
      const qrCodeData = await endAllTeacherSessions();
      setEndSessionsQRCode(qrCodeData);
      setIsQRDialogOpen(true);
    } catch (error) {
      // Handle error
    }
  };
  const [data, setData] = useState<TeacherDashboardData | null>(null);
  const [loading, setLoading] = useState(true);

  const loadData = useCallback(async () => {
    try {
      const dashboardData: TeacherDashboardData =
        await fetchTeacherDashboardData();
      setData(dashboardData);
    } catch (error) {
      console.error("Failed to fetch dashboard data:", error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadData();
  }, [loadData]);

  if (loading) {
    return <Spinner />;
  }

  if (!data) {
    return <Callout intent={Intent.DANGER}>Failed to load data.</Callout>;
  }

  return (
    <div className="teacher-dashboard">
      <H2>Teacher Dashboard</H2>

      <Section
        title="Active Students"
        elevation={1}
        collapsible={true}
        icon="user"
      >
        <Table2 numRows={data.activeStudents.length}>
          <Column
            name="Student ID"
            cellRenderer={(rowIndex) => (
              <Cell>{data.activeStudents[rowIndex].student_id}</Cell>
            )}
          />
          <Column
            name="Name"
            cellRenderer={(rowIndex) => (
              <Cell>{data.activeStudents[rowIndex].name}</Cell>
            )}
          />
          <Column
            name="Email"
            cellRenderer={(rowIndex) => (
              <Cell>{data.activeStudents[rowIndex].email}</Cell>
            )}
          />
          <Column
            name="Status"
            cellRenderer={(rowIndex) => (
              <Cell>{data.activeStudents[rowIndex].status}</Cell>
            )}
          />
        </Table2>
      </Section>

      <Section title="Courses" elevation={1} collapsible={true} icon="book">
        <HTMLTable>
          <thead>
            <tr>
              <th>Course ID</th>
              <th>Course Name</th>
              <th>Active Students</th>
              <th>Total Students</th>
            </tr>
          </thead>
          <tbody>
            {data.courses.map((course) => (
              <tr key={course.course_id}>
                <td>{course.course_id}</td>
                <td>{course.course_name}</td>
                <td>{course.active_students}</td>
                <td>{course.total_students}</td>
              </tr>
            ))}
          </tbody>
        </HTMLTable>
      </Section>

      <Section
        title="Timetable"
        elevation={1}
        collapsible={true}
        icon="calendar"
      >
        <HTMLTable>
          <thead>
            <tr>
              <th>Day</th>
              <th>Start Time</th>
              <th>End Time</th>
              <th>Course</th>
            </tr>
          </thead>
          <tbody>
            {data.timetable.map((entry, index) => (
              <tr key={index}>
                <td>{entry.day}</td>
                <td>{entry.start_time}</td>
                <td>{entry.end_time}</td>
                <td>{entry.course_name}</td>
              </tr>
            ))}
          </tbody>
        </HTMLTable>
      </Section>

      <Section
        title="Attendance Statistics"
        elevation={1}
        collapsible={true}
        icon="chart"
      >
        <Bar data={data.attendanceStats} />
      </Section>

      <Section title="Actions" elevation={1}>
        <SectionCard>
          <Button
            intent={Intent.PRIMARY}
            text="End All Active Sessions"
            onClick={() => {
              /* Implement end all sessions logic */
            }}
          />
          <Dialog
            isOpen={isQRDialogOpen}
            onClose={() => setIsQRDialogOpen(false)}
            title="End All Sessions QR Code"
          >
            <QRCodeSVG value={endSessionsQRCode} />
          </Dialog>
        </SectionCard>
      </Section>
    </div>
  );
};

export default TeacherDashboard;

================================================================================

File: pages\lecturer\Login.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import { useSetAtom } from "jotai";
import { useNavigate } from "react-router-dom";
import {
  Button,
  Callout,
  Card,
  FormGroup,
  H2,
  InputGroup,
  Intent,
} from "@blueprintjs/core";
import { loginLecturer } from "../../services/auth";
import { userAtom } from "../../store/auth";

const LecturerLogin: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const setUser = useSetAtom(userAtom);
  const navigate = useNavigate();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      const userData = await loginLecturer(email, password);
      setUser({
        id: userData.id,
        role: userData.role,
        name: userData.name,
        token: userData.access_token,
      });
      localStorage.setItem("token", userData.access_token);
      localStorage.setItem(
        "user",
        JSON.stringify({
          id: userData.id,
          role: userData.role,
          name: userData.name,
        })
      );
      console.log("Login successful!");
      navigate("/lecturer/dashboard");
    } catch (error) {
      console.error("Login failed:", error);
      setError("Login failed. Please check your credentials and try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card>
      {/* <img src="https://via.placeholder.com/150" alt="Lecturer" /> */}
      <H2>Lecturer Login</H2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <form onSubmit={handleLogin}>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </FormGroup>
        <Button type="submit" fill intent={Intent.PRIMARY} loading={isLoading}>
          Log In
        </Button>
      </form>
    </Card>
  );
};

export default LecturerLogin;

================================================================================

File: pages\student\Dashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import { Card, Elevation, Button, Icon } from "@blueprintjs/core";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
// import QRCode from "qrcode.react";
import { QRCodeCanvas, QRCodeSVG } from "qrcode.react";
import { fetchStudentDashboardData } from "../../services/api";
import { Cell, Column, Table2 } from "@blueprintjs/table";

// Make sure to import the CSS
import "@blueprintjs/table/lib/css/table.css";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export interface DashboardData {
  activeSession: {
    session_id: string;
    course_name: string;
    lecturer_name: string;
    start_time: string;
    end_time: string;
    qr_code: string;
  } | null;
  attendanceStats: {
    labels: string[];
    datasets: {
      label: string;
      data: number[];
      borderColor: string;
      backgroundColor: string;
    }[];
  };
  timetable: {
    day: string;
    courses: {
      course_name: string;
      start_time: string;
      end_time: string;
      lecturer_name: string;
    }[];
  }[];
  totalAttendance: number;
  totalCourses: number;
  currentDay: string;
  currentTimestamp: string;
}

const StudentDashboard: React.FC = () => {
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(
    null
  );
  const [countdown, setCountdown] = useState<string>("");
  const [currentTime, setCurrentTime] = useState<Date>(new Date());

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await fetchStudentDashboardData();
        setDashboardData(data);
        setCurrentTime(new Date(data.currentTimestamp));
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      }
    };

    fetchData();
    const interval = setInterval(fetchData, 5 * 60 * 1000); // Fetch every 5 minutes

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime((prevTime) => new Date(prevTime.getTime() + 1000));
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    if (dashboardData?.activeSession) {
      const timer = setInterval(() => {
        const now = currentTime;
        const end = new Date(dashboardData.activeSession!.end_time);
        const diff = end.getTime() - now.getTime();

        if (diff > 0) {
          const hours = Math.floor(diff / (1000 * 60 * 60));
          const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((diff % (1000 * 60)) / 1000);
          setCountdown(`${hours}h ${minutes}m ${seconds}s`);
        } else {
          setCountdown("Session ended");
          clearInterval(timer);
        }
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [dashboardData, currentTime]);

  if (!dashboardData) return <div>Loading...</div>;

  const isCurrentlyActive = (startTime: string, endTime: string): boolean => {
    const now = currentTime;
    const [startHour, startMinute] = startTime.split(":").map(Number);
    const [endHour, endMinute] = endTime.split(":").map(Number);
    const start = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate(),
      startHour,
      startMinute
    );
    const end = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate(),
      endHour,
      endMinute
    );
    return now >= start && now <= end;
  };

  const renderDayCell = (rowIndex: number) => (
    <Cell>
      <div
        className={
          dashboardData.currentDay === dashboardData.timetable[rowIndex].day
            ? "font-bold text-blue-600"
            : ""
        }
      >
        {dashboardData.timetable[rowIndex].day}
      </div>
    </Cell>
  );

  const renderCourseCell = (rowIndex: number) => (
    <Cell>
      {dashboardData.timetable[rowIndex].courses.map((course, index) => (
        <div key={index}>
          {course.course_name}
          {isCurrentlyActive(course.start_time, course.end_time) && (
            <Icon icon="star" intent="primary" className="ml-2" />
          )}
        </div>
      ))}
    </Cell>
  );

  const renderTimeCell = (rowIndex: number) => (
    <Cell>
      {dashboardData.timetable[rowIndex].courses.map((course, index) => {
        const isActive = isCurrentlyActive(course.start_time, course.end_time);
        return (
          <div
            key={index}
            style={{ backgroundColor: isActive ? "#e3f2fd" : undefined }}
          >
            {`${course.start_time} - ${course.end_time}`}
          </div>
        );
      })}
    </Cell>
  );

  const renderLecturerCell = (rowIndex: number) => (
    <Cell>
      {dashboardData.timetable[rowIndex].courses.map((course, index) => (
        <div key={index}>{course.lecturer_name}</div>
      ))}
    </Cell>
  );

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Student Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <Card elevation={Elevation.TWO}>
          <h2 className="text-xl font-semibold mb-2">Statistics</h2>
          <p>Total Attendance: {dashboardData.totalAttendance}</p>
          <p>Total Course Units: {dashboardData.totalCourses}</p>
          <p>Current Time: {currentTime.toLocaleTimeString()}</p>
          <p>Current Day: {dashboardData.currentDay}</p>
        </Card>

        {dashboardData.activeSession && (
          <Card elevation={Elevation.TWO}>
            <h2 className="text-xl font-semibold mb-2">Active Session</h2>
            <p>Course Unit: {dashboardData.activeSession.course_name}</p>
            <p>Lecturer: {dashboardData.activeSession.lecturer_name}</p>
            <p>
              Start Time:{" "}
              {new Date(
                dashboardData.activeSession.start_time
              ).toLocaleTimeString()}
            </p>
            <p>
              End Time:{" "}
              {new Date(
                dashboardData.activeSession.end_time
              ).toLocaleTimeString()}
            </p>
            {/* <p>Time Remaining: {countdown}</p> */}
            <div className="mt-2">
              {/* <QRCode value={dashboardData.activeSession.qr_code} size={128} /> */}
              {/* <QRCodeSVG value={dashboardData.activeSession.qr_code} /> */}
              {dashboardData.activeSession.qr_code}
              <QRCodeCanvas
                value={dashboardData.activeSession.qr_code}
                size={200}
              />
            </div>
          </Card>
        )}
      </div>

      <Card elevation={Elevation.TWO} className="mb-4">
        <h2 className="text-xl font-semibold mb-2">Attendance History</h2>
        <Line
          data={dashboardData.attendanceStats}
          options={{
            responsive: true,
            plugins: {
              legend: {
                position: "top" as const,
              },
              title: {
                display: true,
                text: "Attendance History",
              },
            },
          }}
        />
      </Card>

      <Card elevation={Elevation.TWO}>
        <h2 className="text-xl font-semibold mb-2">Timetable</h2>
        <Table2 numRows={dashboardData.timetable.length}>
          <Column name="Day" cellRenderer={renderDayCell} />
          <Column name="Course Unit" cellRenderer={renderCourseCell} />
          <Column name="Time" cellRenderer={renderTimeCell} />
          <Column name="Lecturer" cellRenderer={renderLecturerCell} />
        </Table2>
      </Card>
    </div>
  );
};

export default StudentDashboard;

================================================================================

File: pages\student\LiveAttendancPage.tsx
--------------------------------------------------------------------------------
// src/pages/LiveAttendancePage.tsx

import React, { useEffect, useRef } from "react";
import { Callout, Card } from "@blueprintjs/core";

const LiveAttendancePage: React.FC = () => {
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    // Set up WebSocket connection to receive live attendance data
    const ws = new WebSocket("ws://your-backend-url/live-attendance");
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      // Update UI with received data
    };

    return () => {
      ws.close();
    };
  }, []);

  return (
    <div>
      <h2>Live Attendance</h2>
      <Callout intent="warning" className=" m-2">
        This page will be renderd on tablet screen at entrance of buildings to
        automatically register attendance, and give feedback in the future.
      </Callout>
      <Card>
        <video ref={videoRef} autoPlay muted />
        {/* Display attendance information here */}
      </Card>
    </div>
  );
};

export default LiveAttendancePage;

================================================================================

File: pages\student\Login.tsx
--------------------------------------------------------------------------------
// src/pages/student/Login.tsx

import React, { useState } from "react";
import { useSetAtom } from "jotai";
import { useNavigate } from "react-router-dom";
import { Button, Card, H2, Callout, Intent } from "@blueprintjs/core";
import FaceCapture from "../../components/FaceCapture";
import { studentFaceLogin } from "../../services/api";
import { userAtom } from "../../store/auth";

const StudentLogin: React.FC = () => {
  const [capturedImages, setCapturedImages] = useState<File[]>([]);
  const [error, setError] = useState<string | null>(null);
  const setUser = useSetAtom(userAtom);
  const navigate = useNavigate();

  const handleLogin = async () => {
    if (capturedImages.length > 0) {
      try {
        // Convert the first captured image to a base64 string
        const reader = new FileReader();
        reader.readAsDataURL(capturedImages[0]);
        reader.onloadend = async () => {
          const base64Image = reader.result as string;
          const userData = await studentFaceLogin(base64Image);
          setUser({
            id: userData.student_id,
            role: "student",
            name: userData.name,
            token: userData.access_token,
          });
          localStorage.setItem("token", userData.access_token);
          localStorage.setItem(
            "user",
            JSON.stringify({
              id: userData.student_id,
              role: "student",
              name: userData.name,
            })
          );
          navigate("/student/dashboard");
        };
      } catch (error) {
        setError("Login failed. Please try again.");
      }
    }
  };

  return (
    <Card>
      <H2>Student Login</H2>
      {error && <Callout intent={Intent.DANGER}>{error}</Callout>}
      <FaceCapture onCapture={setCapturedImages} />
      <Button
        intent="primary"
        onClick={handleLogin}
        disabled={capturedImages.length === 0}
      >
        Login
      </Button>
    </Card>
  );
};

export default StudentLogin;

================================================================================

File: pages\student\StartSession.tsx
--------------------------------------------------------------------------------
import React, { useState, useRef, useEffect } from "react";
import {
  Card,
  FormGroup,
  Button,
  Intent,
  HTMLSelect,
  Alert,
  Callout,
  H5,
} from "@blueprintjs/core";
import {
  getActiveCourses,
  startStudentSession,
  endStudentSession,
  checkActiveSession,
} from "../../services/api";

export interface Course {
  id: string;
  name: string;
}

export interface ActiveSession {
  session_id: string;
  course_name: string;
  start_time: string;
  qr_code: string;
}

const StartSessionPage: React.FC = () => {
  const [courseId, setCourseId] = useState<string>("");
  const [error, setError] = useState<string>("");
  const [courses, setCourses] = useState<Course[]>([]);
  const [activeSession, setActiveSession] = useState<ActiveSession | null>(
    null
  );
  const [isAlertOpen, setIsAlertOpen] = useState(false);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        const session = await checkActiveSession();
        if (session) {
          setActiveSession(session);
        } else {
          const activeCourses = await getActiveCourses();
          if (activeCourses.length > 0) {
            setCourses(activeCourses);
          } else {
            setError("There are no active courses at the moment.");
          }
        }
      } catch (error) {
        console.error("Error fetching initial data:", error);
        setError("Failed to fetch initial data. Please try again.");
      }
    };
    fetchInitialData();

    return () => {
      stopCamera();
    };
  }, []);

  const startCamera = async () => {
    try {
      const newStream = await navigator.mediaDevices.getUserMedia({
        video: true,
      });
      setStream(newStream);
      if (videoRef.current) {
        videoRef.current.srcObject = newStream;
      }
      console.log("Camera started successfully");
    } catch (err) {
      console.error("Failed to start camera:", err);
      setError("Failed to start camera. Please check your permissions.");
    }
  };

  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      setStream(null);
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    console.log("Camera stopped");
  };

  const captureImage = () => {
    if (videoRef.current) {
      const canvas = document.createElement("canvas");
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      canvas.getContext("2d")?.drawImage(videoRef.current, 0, 0);
      const imageDataUrl = canvas.toDataURL("image/jpeg");
      setCapturedImage(imageDataUrl);
      console.log("Image captured");
      stopCamera();
    }
  };

  const handleStartSession = async () => {
    setError("");
    try {
      if (!capturedImage) {
        setError("Please capture an image before starting the session.");
        return;
      }

      const response = await startStudentSession(courseId, capturedImage);
      setActiveSession({
        session_id: response.session_id,
        course_name: courses.find((c) => c.id === courseId)?.name || "",
        start_time: new Date().toLocaleString(),
        qr_code: response.qr_code,
      });
    } catch (error: any) {
      console.error("Error starting session:", error);
      setError(
        error.response?.data?.error ||
          "Failed to start session. Please try again."
      );
    }
  };

  const handleEndSession = async () => {
    if (activeSession) {
      try {
        await endStudentSession(activeSession.session_id);
        setActiveSession(null);
        setIsAlertOpen(false);
        setCapturedImage(null);
        const activeCourses = await getActiveCourses();
        setCourses(activeCourses);
      } catch (error: any) {
        console.error("Error ending session:", error);
        setError(
          error.response?.data?.error ||
            "Failed to end session. Please try again."
        );
      }
    }
  };

  return (
    <Card className="w-1/2 mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">Start Session</h2>
      {error && (
        <Callout intent={Intent.DANGER} title="Error" className="mb-4">
          {error}
        </Callout>
      )}

      {activeSession ? (
        <div>
          <h3 className="text-xl font-bold mb-2">Active Session</h3>
          <p>Course: {activeSession.course_name}</p>
          <p>Started at: {activeSession.start_time}</p>
          <img
            src={activeSession.qr_code}
            alt="Session QR Code"
            className="my-4"
          />
          <Button
            intent={Intent.DANGER}
            onClick={() => setIsAlertOpen(true)}
            text="End Session"
          />

          <Alert
            cancelButtonText="Cancel"
            confirmButtonText="End Session"
            icon="warning-sign"
            intent={Intent.DANGER}
            isOpen={isAlertOpen}
            onCancel={() => setIsAlertOpen(false)}
            onConfirm={handleEndSession}
          >
            <p>Are you sure you want to end this session?</p>
          </Alert>
        </div>
      ) : courses.length > 0 ? (
        <>
          <FormGroup label="Select Course" labelFor="course-select">
            <HTMLSelect
              id="course-select"
              value={courseId}
              onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>
                setCourseId(e.target.value)
              }
              options={[
                { label: "Select a course", value: "" },
                ...courses.map((course) => ({
                  label: course.name,
                  value: course.id,
                })),
              ]}
            />
          </FormGroup>
          <div className="mb-4">
            <video
              ref={videoRef}
              autoPlay
              style={{
                width: "100%",
                maxWidth: "500px",
                display: stream ? "block" : "none",
              }}
            />
            {capturedImage && (
              <div>
                <H5>Captured Image:</H5>
                <img
                  src={capturedImage}
                  alt="Captured"
                  style={{ width: "100%", maxWidth: "500px" }}
                />
              </div>
            )}
            <div className="p-2 gap-1 flex">
              <Button
                onClick={startCamera}
                disabled={!!stream}
                intent={Intent.PRIMARY}
                text="Start Camera"
              />
              <Button
                onClick={captureImage}
                disabled={!stream}
                intent={Intent.SUCCESS}
                text="Capture"
              />
              <Button
                onClick={stopCamera}
                disabled={!stream}
                intent={Intent.DANGER}
                text="Stop Camera"
              />
            </div>
          </div>
          <Button
            intent={Intent.SUCCESS}
            onClick={handleStartSession}
            text="Start Session"
            disabled={!courseId || !capturedImage}
          />
        </>
      ) : (
        <p>There are no active courses at the moment.</p>
      )}
    </Card>
  );
};

export default StartSessionPage;

================================================================================

File: services\api.ts
--------------------------------------------------------------------------------
import axios from "axios";
// import { AdminDashboardData } from "../pages/admin/Dashboard";
import { ActiveSession } from "../pages/student/StartSession";
// import { DashboardData } from "../pages/student/Dashboard";
import { User } from "../store/auth";

export interface StudentDashboardData extends DashboardData {
  courses: Course[];
  attendanceStats: {
    total: number;
    present: number;
    absent: number;
  };
  upcomingClasses: {
    courseName: string;
    startTime: string;
    endTime: string;
  }[];
}

export interface LecturerDashboardData extends DashboardData {
  courses: Course[];
  totalStudents: number;
  upcomingClasses: {
    courseName: string;
    startTime: string;
    endTime: string;
    totalStudents: number;
  }[];
  attendanceStats: {
    courseName: string;
    attendancePercentage: number;
  }[];
}

const API_URL = "http://localhost:5000/api";

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
export default api;
interface Student {
  student_id: string;
  name: string;
  email: string;
  password: string;
}

interface Lecturer {
  name: string;
  email: string;
  password: string;
}

export interface LoginResponse {
  student_id: string;
  name: string;
  access_token: string;
}
export interface SessionResponse {
  message: string;
  session_id: string;
  qr_code: string;
}

export interface Course {
  id: string;
  name: string;
}

// export const registerStudent = async (studentData: Student, images: File[]) => {
//   const formData = new FormData();
//   formData.append("student_id", studentData.student_id);
//   formData.append("name", studentData.name);
//   formData.append("email", studentData.email);
//   formData.append("password", studentData.password); // Add this line
//   images.forEach((image, index) => {
//     formData.append("files", image, `face_${index}.jpg`);
//   });

//   const response = await api.post("/admin/register_student", formData, {
//     headers: { "Content-Type": "multipart/form-data" },
//   });
//   return response.data;
// };

export const fetchTeacherDashboardData = async () => {
  const response = await api.get("/teacher/dashboard", {
    headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
  });
  return response.data;
};

export const endAllTeacherSessions = async () => {
  const response = await api.post(
    "/teacher/end_all_sessions",
    {},
    {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    }
  );
  return response.data;
};

export const registerLecturer = async (
  name: string,
  email: string,
  password: string
): Promise<void> => {
  const response = await api.post(
    "/admin/register_lecturer",
    { name, email, password },
    {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    }
  );
  return response.data;
};

export const addCourse = async (
  courseName: string,
  lecturerId: string
): Promise<void> => {
  const response = await api.post(
    "/admin/add_course",
    { course_name: courseName, lecturer_id: lecturerId },
    {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    }
  );
  return response.data;
};

export const getStudentCourses = async (): Promise<Course[]> => {
  const response = await api.get<Course[]>("/student/courses");
  return response.data;
};

export const addTimetableEntry = async (
  courseId: string,
  day: string,
  startTime: string,
  endTime: string
): Promise<void> => {
  const response = await api.post(
    "/admin/add_timetable",
    { course_id: courseId, day, start_time: startTime, end_time: endTime },
    {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    }
  );
  return response.data;
};

export const getTimetable = async (courseId: string): Promise<any[]> => {
  const response = await api.get(`/timetable/${courseId}`);
  return response.data;
};

// In api.ts

export const getActiveCourses = async (): Promise<Course[]> => {
  const response = await api.get<Course[]>("/student/active_courses");
  return response.data;
};

export const checkActiveSession = async (): Promise<ActiveSession | null> => {
  const response = await api.get("/student/active_session");
  return response.data;
};

export const startStudentSession = async (
  courseId: string,
  imageData: string
): Promise<SessionResponse> => {
  const response = await api.post<SessionResponse>("/student/start_session", {
    course_id: courseId,
    image: imageData,
  });
  return response.data;
};

export const endStudentSession = async (sessionId: string): Promise<void> => {
  const response = await api.post(`/student/end_session/${sessionId}`);
  return response.data;
};

// src/services/api.ts

// ... existing imports ...

export const registerStudent = async (studentData: Student, images: File[]) => {
  const formData = new FormData();
  formData.append("student_id", studentData.student_id);
  formData.append("name", studentData.name);
  formData.append("email", studentData.email);
  formData.append("password", studentData.password);
  images.forEach((image, index) => {
    formData.append("files", image, `face_${index}.jpg`);
  });

  const response = await api.post("/student/register", formData, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return response.data;
};

export const getStudentsForApproval = async () => {
  const response = await api.get("/admin/students-for-approval");
  return response.data;
};

export const approveStudent = async (studentId: string) => {
  const response = await api.post(`/admin/approve-student/${studentId}`);
  return response.data;
};

export const rejectStudent = async (studentId: string) => {
  const response = await api.post(`/admin/reject-student/${studentId}`);
  return response.data;
};

// src/services/api.ts

// ... existing imports and code ...

// Keep the existing studentLogin function for backward compatibility
export const studentLogin = async (
  email: string,
  password: string
): Promise<LoginResponse> => {
  const response = await api.post<LoginResponse>("/student/login", {
    email,
    password,
  });
  return response.data;
};

export const studentFaceLogin = async (
  imageData: string
): Promise<LoginResponse> => {
  const response = await api.post<LoginResponse>("/student/face-login", {
    image: imageData,
  });
  return response.data;
};

export const login = async (email: string, password: string): Promise<User> => {
  try {
    const response = await api.post<User>("/login", { email, password });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error) && error.response) {
      throw new Error(
        error.response.data.error || "An error occurred during login"
      );
    }
    throw new Error("An unexpected error occurred");
  }
};

// Add this to src/services/api.ts

export const registerAdmin = async (
  name: string,
  email: string,
  password: string
): Promise<void> => {
  const response = await api.post(
    "/register/admin",
    { name, email, password },
    {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    }
  );
  return response.data;
};

// src/services/api.ts

// ... (keep existing imports and api setup)

export interface DashboardData {
  // Common dashboard data
  name: string;
  role: "student" | "lecturer" | "admin";
  // Add more common fields as needed
}

export interface AdminDashboardData extends DashboardData {
  totalStudents: number;
  totalLecturers: number;
  totalCourses: number;
  recentRegistrations: {
    name: string;
    role: "student" | "lecturer";
    date: string;
  }[];
  pendingApprovals: number;
}

export const fetchDashboardData = async (): Promise<DashboardData> => {
  const response = await api.get("/dashboard");
  return response.data;
};

export const fetchStudentDashboardData =
  async (): Promise<StudentDashboardData> => {
    const response = await api.get("/student/dashboard");
    return response.data;
  };

export const fetchLecturerDashboardData =
  async (): Promise<LecturerDashboardData> => {
    const response = await api.get("/lecturer/dashboard");
    return response.data;
  };

export const fetchAdminDashboardData =
  async (): Promise<AdminDashboardData> => {
    const response = await api.get("/admin/dashboard");
    return response.data;
  };

// ... (keep other existing functions)

================================================================================

File: services\auth.ts
--------------------------------------------------------------------------------
import api from "./api";

export const loginStudent = async (faceId: string) => {
  const response = await api.post("/student/login", { faceId });
  return response.data;
};

export const loginLecturer = async (email: string, password: string) => {
  try {
    const response = await api.post("/lecturer/login", { email, password });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const loginAdmin = async (email: string, password: string) => {
  try {
    const response = await api.post("/admin/login", { email, password });
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const logout = () => {
  localStorage.removeItem("token");
  localStorage.removeItem("user");
};

================================================================================

File: store\auth.ts
--------------------------------------------------------------------------------
// src/store/auth.ts

import { atom } from "jotai";

export interface User {
  id: string;
  name: string;
  role: "student" | "lecturer" | "admin";
  access_token: string; // Changed from 'token' to 'access_token' to match the API response
}

export const userAtom = atom<User | null>(null);

================================================================================

File: store\dashboardStore.ts
--------------------------------------------------------------------------------
import { atom } from "jotai";
import { AdminDashboardData } from "../pages/admin/Dashboard";
import { TeacherDashboardData } from "../pages/lecturer/Dashboard";

export const adminDashboardAtom = atom<AdminDashboardData | null>(null);
export const teacherDashboardAtom = atom<TeacherDashboardData | null>(null);
export const dashboardLoadingAtom = atom<boolean>(false);
export const dashboardErrorAtom = atom<string | null>(null);

================================================================================

File: utils\sessionManager.ts
--------------------------------------------------------------------------------
import { jwtDecode } from "jwt-decode";
import { userAtom } from "../store/auth";
import { useSetAtom } from "jotai";

interface DecodedToken {
  exp: number;
}

export const checkSessionExpiration = () => {
  const token = localStorage.getItem("token");
  if (token) {
    const decodedToken = jwtDecode(token) as DecodedToken;
    const currentTime = Date.now() / 1000;

    if (decodedToken.exp < currentTime) {
      // Token has expired
      return true;
    }
  }
  return false;
};

export const useLogout = () => {
  const setUser = useSetAtom(userAtom);

  return () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setUser(null);
  };
};

================================================================================

