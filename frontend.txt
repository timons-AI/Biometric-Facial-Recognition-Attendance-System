Directory Structure:
================================================================================
src/
    App.tsx
    index.css
    main.tsx
    timetable.ts
    vite-env.d.ts
    api/
        api.ts
    components/
        AdminApproval.tsx
        AdminDashboard.tsx
        AdminRegistrationForm.tsx
        AdminTimeTableMgt.tsx
        FaceCapture.tsx
        LecturerDashboard.tsx
        LecturerRegistration.tsx
        LoadingSpinner.tsx
        LoginForm.tsx
        Navbar.tsx
        PageNotFound.tsx
        RegsitrationForm.tsx
        StudentDashboard.tsx
        StudentViewPortal.tsx
        Toaster.ts
    store/
        auth.ts
        dashboardStore.ts
    types/
    utils/
        sessionManager.ts
================================================================================

File: App.tsx
--------------------------------------------------------------------------------
import React from "react";
import {
  BrowserRouter as Router,
  Route,
  Routes,
  Navigate,
} from "react-router-dom";
import { useAtom } from "jotai";
import { isAuthenticatedAtom, userAtom } from "./store/auth";
import AppNavbar from "./components/Navbar";
import RegistrationForm from "./components/RegsitrationForm";
import LoginForm from "./components/LoginForm";
import AdminApproval from "./components/AdminApproval";
import StudentDashboard from "./components/StudentDashboard";
import LecturerDashboard from "./components/LecturerDashboard";
import AdminDashboard from "./components/AdminDashboard";
import AdminRegistration from "./components/AdminRegistrationForm";
import StudentViewPortal from "./components/StudentViewPortal";
import PageNotFound from "./components/PageNotFound";
import AdminTimetableManagement from "./components/AdminTimeTableMgt";
import LecturerRegistration from "./components/LecturerRegistration";

const App: React.FC = () => {
  const [isAuthenticated] = useAtom(isAuthenticatedAtom);
  const [user] = useAtom(userAtom);

  const PrivateRoute: React.FC<{
    element: React.ReactElement;
    allowedRoles: string[];
  }> = ({ element, allowedRoles }) => {
    if (!isAuthenticated) {
      return <Navigate to="/login" />;
    }
    if (user && !allowedRoles.includes(user.role)) {
      return <Navigate to="/" />;
    }
    return element;
  };

  return (
    <Router>
      <AppNavbar />
      <div className="container mx-auto mt-4">
        <Routes>
          <Route path="/register" element={<RegistrationForm />} />
          <Route path="/login" element={<LoginForm />} />
          <Route path="/student-portal" element={<StudentViewPortal />} />
          <Route
            path="/student/dashboard"
            element={
              <PrivateRoute
                element={<StudentDashboard />}
                allowedRoles={["student"]}
              />
            }
          />
          <Route
            path="/lecturer/dashboard"
            element={
              <PrivateRoute
                element={<LecturerDashboard />}
                allowedRoles={["lecturer"]}
              />
            }
          />
          <Route
            path="/admin/dashboard"
            element={
              <PrivateRoute
                element={<AdminDashboard />}
                allowedRoles={["admin"]}
              />
            }
          />
          <Route
            path="/admin/approve-students"
            element={
              <PrivateRoute
                element={<AdminApproval />}
                allowedRoles={["admin"]}
              />
            }
          />

          <Route path="/admin/register-admin" element={<AdminRegistration />} />
          <Route
            path="/admin/register-lecturer"
            element={<LecturerRegistration />}
          />
          <Route
            path="/admin/timetable-management"
            element={
              <PrivateRoute
                element={<AdminTimetableManagement />}
                allowedRoles={["admin"]}
              />
            }
          />

          <Route path="/" element={<Navigate to="/login" replace />} />
          {/* pages that don't exist */}
          <Route path="*" element={<PageNotFound />} />
        </Routes>
      </div>
    </Router>
  );
};

export default App;

================================================================================

File: index.css
--------------------------------------------------------------------------------
@import "normalize.css";
@import "@blueprintjs/core/lib/css/blueprint.css";
@import "@blueprintjs/icons/lib/css/blueprint-icons.css";
@import "@blueprintjs/table/lib/css/table.css";
@import "@blueprintjs/select/lib/css/blueprint-select.css";

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';


body {
  margin: 0;
  
  min-width: 320px;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;

}

#root {
  width: 100%;
  height: 100%;
  

}
================================================================================

File: main.tsx
--------------------------------------------------------------------------------
import ReactDOM from "react-dom/client";
import "./index.css";
import { Colors, OverlayToaster, OverlaysProvider } from "@blueprintjs/core";
import { useAtom } from "jotai";
import { darkModeAtom } from "./store/auth";
import App from "./App";
const Main = () => {
  const [isDarkMode] = useAtom(darkModeAtom);
  return (
    <OverlaysProvider>
      <div
        style={{
          background: isDarkMode ? Colors.DARK_GRAY1 : Colors.LIGHT_GRAY1,
        }}
        className={`${
          isDarkMode ? "bp5-dark" : "bp5-light"
        } min-h-screen w-full`}
      >
        <div className="toaster-container">
          <OverlayToaster />
        </div>
        <App />
      </div>
    </OverlaysProvider>
  );
};

ReactDOM.createRoot(document.getElementById("root")!).render(
  // <React.StrictMode>
  <>
    <Main />
  </>
  // </React.StrictMode>
);

================================================================================

File: timetable.ts
--------------------------------------------------------------------------------
export interface CourseUnit {
  id: number;
  code: string;
  name: string;
}

export interface TimetableEntry {
  id: number;
  day: string;
  startTime: string;
  endTime: string;
  room: string;
  courseUnit: CourseUnit;
}

export interface Course {
  id: number;
  name: string;
  timetableEntries: TimetableEntry[];
}

================================================================================

File: vite-env.d.ts
--------------------------------------------------------------------------------
/// <reference types="vite/client" />

================================================================================

File: api\api.ts
--------------------------------------------------------------------------------
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import { Course } from "../timetable";
import { PaginatedResponse } from "../components/AdminApproval";

// const API_URL = "http://localhost:5000/api";
// //  https://421e-41-210-141-191.ngrok-free.app/api
// // const API_URL = "https://421e-41-210-141-191.ngrok-free.app/api";
// https://583a-41-210-141-191.ngrok-free.app/

// const api = axios.create({
//   baseURL: API_URL,
//   headers: {
//     "Content-Type": "application/json",
//   },
// });

const API_URL = "https://7384-129-205-1-137.ngrok-free.app/api"; // Use the ngrok URL

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
    "ngrok-skip-browser-warning": "true",
  },
});

export default api;

api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response.status === 401) {
      localStorage.removeItem("token");
      window.location.href = "/login";
    }
    return Promise.reject(error);
  }
);

export interface UserData {
  id: string;
  email: string;
  role: "student" | "lecturer" | "admin";
  name: string;
}

export const login = async (
  email: string,
  password: string
): Promise<UserData> => {
  const response = await api.post("/login", { email, password });
  const { access_token } = response.data;
  localStorage.setItem("token", access_token);

  const decodedToken = jwtDecode<UserData & { exp: number }>(access_token);
  console.log("Decoded Token:", decodedToken);

  if (
    !decodedToken.id ||
    !decodedToken.email ||
    !decodedToken.role ||
    !decodedToken.name
  ) {
    throw new Error("Invalid token payload");
  }

  return {
    id: decodedToken.id,
    email: decodedToken.email,
    role: decodedToken.role as "student" | "lecturer" | "admin",
    name: decodedToken.name,
  };
};

export const register = async (userData: FormData): Promise<void> => {
  const response = await api.post("/register", userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
  return response.data;
};

export const registerAdmin = async (adminData: any) => {
  const response = await api.post("/register/admin", adminData);
  return response.data;
};

export const getPendingRegistrations = async (
  page: number = 1,
  perPage: number = 10
): Promise<PaginatedResponse> => {
  const response = await api.get(
    `/admin/pending_registrations?page=${page}&per_page=${perPage}`
  );
  return response.data;
};

export const approveUser = async (userId: number) => {
  const response = await api.post(`/admin/approve_user/${userId}`);
  return response.data;
};

export const rejectUser = async (userId: number) => {
  const response = await api.post(`/admin/reject_user/${userId}`);
  return response.data;
};
export const getLecturerTimetable = async (): Promise<Course[]> => {
  const response = await api.get("/api/lecturer/timetable");
  return response.data;
};

================================================================================

File: components\AdminApproval.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Button,
  Card,
  Elevation,
  HTMLTable,
  Intent,
  Spinner,
  Tag,
} from "@blueprintjs/core";
import { getPendingRegistrations, approveUser, rejectUser } from "../api/api";
import { showToast } from "./Toaster";

interface PendingUser {
  user_id: number;
  email: string;
  role: string;
  name?: string;
  student_id?: string;
  academic_year_id?: number;
  course_id?: number;
  college_id?: number;
  semester_id?: number;
}

export interface PaginatedResponse {
  pending_registrations: PendingUser[];
  total_count: number;
  pages: number;
  current_page: number;
  per_page: number;
}

const AdminApproval: React.FC = () => {
  const [pendingUsers, setPendingUsers] = useState<PendingUser[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetchPendingRegistrations(currentPage);
  }, [currentPage]);

  const fetchPendingRegistrations = async (page: number) => {
    setIsLoading(true);
    try {
      const data = await getPendingRegistrations(page);
      setPendingUsers(data.pending_registrations);
      setTotalPages(data.pages);
      setCurrentPage(data.current_page);
    } catch (error) {
      console.error("Failed to fetch pending registrations:", error);
      showToast("Failed to fetch pending registrations", Intent.DANGER);
    } finally {
      setIsLoading(false);
    }
  };

  const handleApprove = async (userId: number) => {
    try {
      await approveUser(userId);
      fetchPendingRegistrations(currentPage);
      showToast("User approved", Intent.SUCCESS);
    } catch (error) {
      console.error("Failed to approve user:", error);
      showToast("Failed to approve user", Intent.DANGER);
    }
  };

  const handleReject = async (userId: number) => {
    try {
      await rejectUser(userId);
      fetchPendingRegistrations(currentPage);
      showToast("User rejected", Intent.DANGER);
    } catch (error) {
      console.error("Failed to reject user:", error);
      showToast("Failed to reject user", Intent.DANGER);
    }
  };

  const getRoleTag = (role: string) => {
    switch (role) {
      case "student":
        return <Tag intent={Intent.PRIMARY}>Student</Tag>;
      case "lecturer":
        return <Tag intent={Intent.SUCCESS}>Lecturer</Tag>;
      case "admin":
        return <Tag intent={Intent.WARNING}>Admin</Tag>;
      default:
        return <Tag>Unknown</Tag>;
    }
  };

  return (
    <Card elevation={Elevation.TWO} className="w-full max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Pending Registrations</h2>
      {isLoading ? (
        <Spinner />
      ) : (
        <>
          <HTMLTable className="w-full">
            <thead>
              <tr>
                <th>Email</th>
                <th>Role</th>
                <th>Name</th>
                <th>ID</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {pendingUsers.map((user) => (
                <tr key={user.user_id}>
                  <td>{user.email}</td>
                  <td>{getRoleTag(user.role)}</td>
                  <td>{user.name || "-"}</td>
                  <td>{user.student_id || user.user_id}</td>
                  <td>
                    <Button
                      intent={Intent.SUCCESS}
                      icon="tick"
                      onClick={() => handleApprove(user.user_id)}
                      className="mr-2"
                    >
                      Approve
                    </Button>
                    <Button
                      intent={Intent.DANGER}
                      icon="cross"
                      onClick={() => handleReject(user.user_id)}
                    >
                      Reject
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </HTMLTable>
          <div className="mt-4 flex justify-between items-center">
            <Button
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            >
              Previous
            </Button>
            <span>
              Page {currentPage} of {totalPages}
            </span>
            <Button
              disabled={currentPage === totalPages}
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
            >
              Next
            </Button>
          </div>
        </>
      )}
    </Card>
  );
};

export default AdminApproval;

================================================================================

File: components\AdminDashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Card,
  Elevation,
  H3,
  H5,
  Spinner,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { Cell, Column, Table2 } from "@blueprintjs/table";
import { Bar, Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import api from "../api/api";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

interface OverallStats {
  total_students: number;
  total_lecturers: number;
  total_courses: number;
  total_attendances: number;
}

interface RecentRegistration {
  name: string;
  role: string;
  email: string;
  date: string;
}

interface TopCourse {
  name: string;
  attendance_rate: number;
}

interface TopLecturer {
  name: string;
  class_count: number;
}

interface AdminDashboardData {
  admin_name: string;
  overall_stats: OverallStats;
  recent_registrations: RecentRegistration[];
  top_courses: TopCourse[];
  top_lecturers: TopLecturer[];
}

const AdminDashboard: React.FC = () => {
  const [dashboardData, setDashboardData] = useState<AdminDashboardData | null>(
    null
  );
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const response = await api.get("/admin/dashboard");
      setDashboardData(response.data);
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
      setError("Failed to load dashboard data. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <Spinner size={50} />;
  }

  if (error) {
    return <Callout intent={Intent.DANGER}>{error}</Callout>;
  }

  if (!dashboardData) {
    return (
      <Callout intent={Intent.WARNING}>No dashboard data available.</Callout>
    );
  }

  const {
    admin_name,
    overall_stats,
    recent_registrations,
    top_courses,
    top_lecturers,
  } = dashboardData;

  const courseAttendanceData = {
    labels: top_courses.map((course) => course.name),
    datasets: [
      {
        label: "Attendance Rate",
        data: top_courses.map((course) => course.attendance_rate),
        backgroundColor: "rgba(75, 192, 192, 0.6)",
      },
    ],
  };

  const overallStatsData = {
    labels: ["Students", "Lecturers", "Courses", "Attendances"],
    datasets: [
      {
        data: [
          overall_stats.total_students,
          overall_stats.total_lecturers,
          overall_stats.total_courses,
          overall_stats.total_attendances,
        ],
        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0"],
        hoverBackgroundColor: ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0"],
      },
    ],
  };

  return (
    <div className="p-4">
      <H3>Welcome, {admin_name}</H3>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Overall Statistics</H5>
        <div style={{ height: "300px" }}>
          <Doughnut
            data={overallStatsData}
            options={{ maintainAspectRatio: false }}
          />
        </div>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Top Courses by Attendance Rate</H5>
        <div style={{ height: "300px" }}>
          <Bar
            data={courseAttendanceData}
            options={{ maintainAspectRatio: false }}
          />
        </div>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Recent Registrations</H5>
        <Table2 numRows={recent_registrations.length}>
          <Column
            name="Name"
            cellRenderer={(rowIndex) => (
              <Cell>{recent_registrations[rowIndex].name}</Cell>
            )}
          />
          <Column
            name="Role"
            cellRenderer={(rowIndex) => (
              <Cell>{recent_registrations[rowIndex].role}</Cell>
            )}
          />
          <Column
            name="Email"
            cellRenderer={(rowIndex) => (
              <Cell>{recent_registrations[rowIndex].email}</Cell>
            )}
          />
          {/* <Column
            name="Date"
            cellRenderer={(rowIndex) => (
              <Cell>{recent_registrations[rowIndex].date}</Cell>
            )}
          /> */}
        </Table2>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Top Lecturers by Class Count</H5>
        <Table2 numRows={top_lecturers.length}>
          <Column
            name="Name"
            cellRenderer={(rowIndex) => (
              <Cell>{top_lecturers[rowIndex].name}</Cell>
            )}
          />
          <Column
            name="Class Count"
            cellRenderer={(rowIndex) => (
              <Cell>{top_lecturers[rowIndex].class_count}</Cell>
            )}
          />
        </Table2>
      </Card>
    </div>
  );
};

export default AdminDashboard;

================================================================================

File: components\AdminRegistrationForm.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import {
  Button,
  FormGroup,
  InputGroup,
  Intent,
  Card,
  Callout,
} from "@blueprintjs/core";
import { registerAdmin } from "../api/api";
import { showToast } from "./Toaster";

const AdminRegistration: React.FC = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });

  const [, setLoading] = useState(false);
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await registerAdmin(formData);
      showToast("Admin registered successfully", Intent.SUCCESS);
    } catch (error) {
      console.error("Admin registration failed:", error);
      showToast("Admin registration failed", Intent.DANGER);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card elevation={2} className="w-full max-w-md mx-auto">
      <Callout intent={Intent.WARNING} title="Temporary Feature">
        This admin registration page is temporary and should be removed or
        secured in production.
      </Callout>
      <h2 className="text-2xl font-bold mb-4 mt-4">Admin Registration</h2>
      <form onSubmit={handleSubmit}>
        <FormGroup label="Name" labelFor="name-input">
          <InputGroup
            id="name-input"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            name="email"
            type="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            name="password"
            type="password"
            value={formData.password}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <Button
          type="submit"
          intent={Intent.PRIMARY}
          text="Register Admin"
          className="w-full mt-4"
        />
      </form>
    </Card>
  );
};

export default AdminRegistration;

================================================================================

File: components\AdminTimeTableMgt.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Card,
  FormGroup,
  InputGroup,
  Button,
  HTMLSelect,
  H3,
  H4,
  Intent,
  Toaster,
  Position,
  Callout,
} from "@blueprintjs/core";

import api from "../api/api";

const AppToaster = Toaster.create({
  className: "recipe-toaster",
  position: Position.TOP,
});

interface AcademicYear {
  id: number;
  year: string;
}

interface Semester {
  id: number;
  name: string;
  academicYearId: number;
}

interface College {
  id: number;
  name: string;
}

interface Course {
  id: number;
  name: string;
  collegeId: number;
}

interface CourseUnit {
  id: number;
  code: string;
  name: string;
  courseId: number;
}

interface Lecturer {
  id: number;
  name: string;
}

interface TimetableEntry {
  id?: number;
  semesterId: number;
  courseUnitId: number;
  day: string;
  startTime: string;
  endTime: string;
  room: string;
  lecturerId: number;
}

const daysOfWeek = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];

const AdminTimetableManagement: React.FC = () => {
  const [academicYears, setAcademicYears] = useState<AcademicYear[]>([]);
  const [semesters, setSemesters] = useState<Semester[]>([]);
  const [colleges, setColleges] = useState<College[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);
  const [courseUnits, setCourseUnits] = useState<CourseUnit[]>([]);
  const [lecturers, setLecturers] = useState<Lecturer[]>([]);

  const [newAcademicYear, setNewAcademicYear] = useState("");
  const [newSemester, setNewSemester] = useState({
    name: "",
    academicYearId: "",
  });
  const [newCollege, setNewCollege] = useState("");
  const [newCourse, setNewCourse] = useState({ name: "", collegeId: "" });
  const [newCourseUnit, setNewCourseUnit] = useState({
    code: "",
    name: "",
    courseId: "",
  });
  const [newTimetableEntry, setNewTimetableEntry] = useState<TimetableEntry>({
    semesterId: 0,
    courseUnitId: 0,
    day: "Monday",
    startTime: "",
    endTime: "",
    room: "",
    lecturerId: 0,
  });

  useEffect(() => {
    fetchAllData();
  }, []);

  const fetchAllData = async () => {
    try {
      const [
        yearsRes,
        semestersRes,
        collegesRes,
        coursesRes,
        unitsRes,
        lecturersRes,
      ] = await Promise.all([
        api.get("/admin/academic-years"),
        api.get("/admin/semesters"),
        api.get("/admin/colleges"),
        api.get("/admin/courses"),
        api.get("/admin/course-units"),
        api.get("/admin/lecturers"),
      ]);
      setAcademicYears(yearsRes.data);
      setSemesters(semestersRes.data);
      setColleges(collegesRes.data);
      setCourses(coursesRes.data);
      setCourseUnits(unitsRes.data);
      setLecturers(lecturersRes.data);
    } catch (error) {
      console.error("Error fetching data:", error);
      AppToaster.show({
        message: "Error fetching data",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateAcademicYear = async () => {
    try {
      await api.post("/admin/academic-years", { year: newAcademicYear });
      setNewAcademicYear("");
      fetchAllData();
      AppToaster.show({
        message: "Academic year created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating academic year:", error);
      AppToaster.show({
        message: "Error creating academic year",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateSemester = async () => {
    try {
      await api.post("/admin/semesters", newSemester);
      setNewSemester({ name: "", academicYearId: "" });
      fetchAllData();
      AppToaster.show({
        message: "Semester created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating semester:", error);
      AppToaster.show({
        message: "Error creating semester",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateCollege = async () => {
    try {
      await api.post("/admin/colleges", { name: newCollege });
      setNewCollege("");
      fetchAllData();
      AppToaster.show({
        message: "College created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating college:", error);
      AppToaster.show({
        message: "Error creating college",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateCourse = async () => {
    try {
      await api.post("/admin/courses", newCourse);
      setNewCourse({ name: "", collegeId: "" });
      fetchAllData();
      AppToaster.show({
        message: "Course created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating course:", error);
      AppToaster.show({
        message: "Error creating course",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateCourseUnit = async () => {
    try {
      await api.post("/admin/course-units", newCourseUnit);
      setNewCourseUnit({ code: "", name: "", courseId: "" });
      fetchAllData();
      AppToaster.show({
        message: "Course unit created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating course unit:", error);
      AppToaster.show({
        message: "Error creating course unit",
        intent: Intent.DANGER,
      });
    }
  };

  const handleCreateTimetableEntry = async () => {
    try {
      await api.post("/admin/timetable-entries", newTimetableEntry);
      setNewTimetableEntry({
        semesterId: 0,
        courseUnitId: 0,
        day: "Monday",
        startTime: "",
        endTime: "",
        room: "",
        lecturerId: 0,
      });
      fetchAllData();
      AppToaster.show({
        message: "Timetable entry created successfully",
        intent: Intent.SUCCESS,
      });
    } catch (error) {
      console.error("Error creating timetable entry:", error);
      AppToaster.show({
        message: "Error creating timetable entry",
        intent: Intent.DANGER,
      });
    }
  };

  return (
    <div className="p-4">
      <Callout intent="warning" title="Under Development" className=" my-2">
        This dashboard is currently under development. More features will be
        added soon.
      </Callout>
      <H3>Timetable Management</H3>

      <Card className="mb-4">
        <H4>Create Academic Year</H4>
        <FormGroup label="Academic Year" labelFor="academic-year-input">
          <InputGroup
            id="academic-year-input"
            value={newAcademicYear}
            onChange={(e) => setNewAcademicYear(e.target.value)}
            placeholder="e.g., 2023/2024"
          />
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateAcademicYear}>
          Create Academic Year
        </Button>
      </Card>

      <Card className="mb-4">
        <H4>Create Semester</H4>
        <FormGroup label="Semester Name" labelFor="semester-name-input">
          <InputGroup
            id="semester-name-input"
            value={newSemester.name}
            onChange={(e) =>
              setNewSemester({ ...newSemester, name: e.target.value })
            }
            placeholder="e.g., Semester I"
          />
        </FormGroup>
        <FormGroup label="Academic Year" labelFor="semester-year-select">
          <HTMLSelect
            id="semester-year-select"
            value={newSemester.academicYearId}
            onChange={(e) =>
              setNewSemester({ ...newSemester, academicYearId: e.target.value })
            }
          >
            <option value="">Select Academic Year</option>
            {academicYears.map((year) => (
              <option key={year.id} value={year.id}>
                {year.year}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateSemester}>
          Create Semester
        </Button>
      </Card>

      <Card className="mb-4">
        <H4>Create College</H4>
        <FormGroup label="College Name" labelFor="college-name-input">
          <InputGroup
            id="college-name-input"
            value={newCollege}
            onChange={(e) => setNewCollege(e.target.value)}
            placeholder="e.g., College of Computing and Information Sciences"
          />
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateCollege}>
          Create College
        </Button>
      </Card>

      <Card className="mb-4">
        <H4>Create Course</H4>
        <FormGroup label="Course Name" labelFor="course-name-input">
          <InputGroup
            id="course-name-input"
            value={newCourse.name}
            onChange={(e) =>
              setNewCourse({ ...newCourse, name: e.target.value })
            }
            placeholder="e.g., Computer Science"
          />
        </FormGroup>
        <FormGroup label="College" labelFor="course-college-select">
          <HTMLSelect
            id="course-college-select"
            value={newCourse.collegeId}
            onChange={(e) =>
              setNewCourse({ ...newCourse, collegeId: e.target.value })
            }
          >
            <option value="">Select College</option>
            {colleges.map((college) => (
              <option key={college.id} value={college.id}>
                {college.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateCourse}>
          Create Course
        </Button>
      </Card>

      <Card className="mb-4">
        <H4>Create Course Unit</H4>
        <FormGroup label="Course Unit Code" labelFor="course-unit-code-input">
          <InputGroup
            id="course-unit-code-input"
            value={newCourseUnit.code}
            onChange={(e) =>
              setNewCourseUnit({ ...newCourseUnit, code: e.target.value })
            }
            placeholder="e.g., CS101"
          />
        </FormGroup>
        <FormGroup label="Course Unit Name" labelFor="course-unit-name-input">
          <InputGroup
            id="course-unit-name-input"
            value={newCourseUnit.name}
            onChange={(e) =>
              setNewCourseUnit({ ...newCourseUnit, name: e.target.value })
            }
            placeholder="e.g., Introduction to Programming"
          />
        </FormGroup>
        <FormGroup label="Course" labelFor="course-unit-course-select">
          <HTMLSelect
            id="course-unit-course-select"
            value={newCourseUnit.courseId}
            onChange={(e) =>
              setNewCourseUnit({ ...newCourseUnit, courseId: e.target.value })
            }
          >
            <option value="">Select Course</option>
            {courses.map((course) => (
              <option key={course.id} value={course.id}>
                {course.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateCourseUnit}>
          Create Course Unit
        </Button>
      </Card>

      <Card className="mb-4">
        <H4>Create Timetable Entry</H4>
        <FormGroup label="Semester" labelFor="timetable-semester-select">
          <HTMLSelect
            id="timetable-semester-select"
            value={newTimetableEntry.semesterId}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                semesterId: Number(e.target.value),
              })
            }
          >
            <option value="">Select Semester</option>
            {semesters.map((semester) => (
              <option key={semester.id} value={semester.id}>
                {semester.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Course Unit" labelFor="timetable-course-unit-select">
          <HTMLSelect
            id="timetable-course-unit-select"
            value={newTimetableEntry.courseUnitId}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                courseUnitId: Number(e.target.value),
              })
            }
          >
            <option value="">Select Course Unit</option>
            {courseUnits.map((unit) => (
              <option key={unit.id} value={unit.id}>
                {unit.code} - {unit.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Day" labelFor="timetable-day-select">
          <HTMLSelect
            id="timetable-day-select"
            value={newTimetableEntry.day}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                day: e.target.value,
              })
            }
          >
            {daysOfWeek.map((day) => (
              <option key={day} value={day}>
                {day}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Start Time" labelFor="timetable-start-time-input">
          <InputGroup
            id="timetable-start-time-input"
            type="time"
            value={newTimetableEntry.startTime}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                startTime: e.target.value,
              })
            }
          />
        </FormGroup>
        <FormGroup label="End Time" labelFor="timetable-end-time-input">
          <InputGroup
            id="timetable-end-time-input"
            type="time"
            value={newTimetableEntry.endTime}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                endTime: e.target.value,
              })
            }
          />
        </FormGroup>
        <FormGroup label="Room" labelFor="timetable-room-input">
          <InputGroup
            id="timetable-room-input"
            value={newTimetableEntry.room}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                room: e.target.value,
              })
            }
            placeholder="e.g., Room 101"
          />
        </FormGroup>
        <FormGroup label="Lecturer" labelFor="timetable-lecturer-select">
          <HTMLSelect
            id="timetable-lecturer-select"
            value={newTimetableEntry.lecturerId}
            onChange={(e) =>
              setNewTimetableEntry({
                ...newTimetableEntry,
                lecturerId: Number(e.target.value),
              })
            }
          >
            <option value="">Select Lecturer</option>
            {lecturers.map((lecturer) => (
              <option key={lecturer.id} value={lecturer.id}>
                {lecturer.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <Button intent={Intent.PRIMARY} onClick={handleCreateTimetableEntry}>
          Create Timetable Entry
        </Button>
      </Card>
    </div>
  );
};

export default AdminTimetableManagement;

================================================================================

File: components\FaceCapture.tsx
--------------------------------------------------------------------------------
// components/FaceCapture.tsx
import React, { useRef, useState, useEffect } from "react";
import { Button, Card, H5, Intent } from "@blueprintjs/core";

interface FaceCaptureProps {
  onCapture: (images: File[]) => void;
  singleCapture?: boolean;
}

const FaceCapture: React.FC<FaceCaptureProps> = ({
  onCapture,
  singleCapture = false,
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [capturedImages, setCapturedImages] = useState<File[]>([]);

  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  const startCamera = async () => {
    try {
      const s = await navigator.mediaDevices.getUserMedia({ video: true });
      setStream(s);
      if (videoRef.current) {
        videoRef.current.srcObject = s;
      }
    } catch (error) {
      console.error("Error accessing camera:", error);
    }
  };

  const captureImage = () => {
    if (videoRef.current) {
      const canvas = document.createElement("canvas");
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      canvas.getContext("2d")?.drawImage(videoRef.current, 0, 0);
      canvas.toBlob((blob) => {
        if (blob) {
          const file = new File([blob], `captured-image-${Date.now()}.jpg`, {
            type: "image/jpeg",
          });
          const newImages = [...capturedImages, file];
          setCapturedImages(newImages);
          onCapture(newImages);
          console.log(`Captured image: ${file.name}, size: ${file.size} bytes`);
          if (singleCapture) {
            stopCamera();
          }
        }
      }, "image/jpeg");
    }
  };

  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      setStream(null);
    }
  };

  const removeImage = (index: number) => {
    const newImages = capturedImages.filter((_, i) => i !== index);
    setCapturedImages(newImages);
    onCapture(newImages);
  };

  return (
    <div>
      <video
        ref={videoRef}
        autoPlay
        style={{ width: "100%", maxWidth: "500px" }}
      />
      <div className=" p-2 gap-1 flex">
        <Button
          onClick={startCamera}
          disabled={!!stream}
          intent={Intent.PRIMARY}
        >
          Start Camera
        </Button>
        <Button
          onClick={captureImage}
          disabled={!stream}
          intent={Intent.SUCCESS}
        >
          Capture
        </Button>
        <Button onClick={stopCamera} disabled={!stream} intent={Intent.DANGER}>
          Stop Camera
        </Button>
      </div>
      <div style={{ marginTop: "20px" }}>
        <H5>Captured Images:</H5>
        <div style={{ display: "flex", flexWrap: "wrap" }}>
          {capturedImages.map((image, index) => (
            <Card key={index} style={{ margin: "10px", width: "150px" }}>
              <img
                src={URL.createObjectURL(image)}
                alt={`Captured ${index}`}
                style={{ width: "100%" }}
              />
              <Button
                onClick={() => removeImage(index)}
                intent={Intent.DANGER}
                small
              >
                Remove
              </Button>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
};

export default FaceCapture;

================================================================================

File: components\LecturerDashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Card,
  Elevation,
  H3,
  H5,
  Tag,
  Spinner,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { Cell, Column, Table2 } from "@blueprintjs/table";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import api from "../api/api";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface TimetableEntry {
  day: string;
  start_time: string;
  end_time: string;
  course_name: string;
  room: string;
}

interface CourseStats {
  course_name: string;
  total_students: number;
  total_attendances: number;
  attendance_rate: number;
}

interface LecturerDashboardData {
  lecturer_name: string;
  timetable: TimetableEntry[];
  upcoming_classes: TimetableEntry[];
  course_stats: CourseStats[];
}

const LecturerDashboard: React.FC = () => {
  const [dashboardData, setDashboardData] =
    useState<LecturerDashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const response = await api.get("/lecturer/dashboard");
      setDashboardData(response.data);
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
      setError("Failed to load dashboard data. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <Spinner size={50} />;
  }

  if (error) {
    return <Callout intent={Intent.DANGER}>{error}</Callout>;
  }

  if (!dashboardData) {
    return (
      <Callout intent={Intent.WARNING}>No dashboard data available.</Callout>
    );
  }

  const { lecturer_name, timetable, upcoming_classes, course_stats } =
    dashboardData;

  const attendanceChartData = {
    labels: course_stats.map((stat) => stat.course_name),
    datasets: [
      {
        label: "Attendance Rate",
        data: course_stats.map((stat) => stat.attendance_rate),
        backgroundColor: "rgba(75, 192, 192, 0.6)",
      },
    ],
  };

  const renderDayCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].day}</Cell>
  );

  const renderTimeCell = (rowIndex: number) => (
    <Cell>{`${timetable[rowIndex].start_time} - ${timetable[rowIndex].end_time}`}</Cell>
  );

  const renderCourseCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].course_name}</Cell>
  );

  const renderRoomCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].room}</Cell>
  );

  return (
    <div className="p-4">
      <H3>Welcome, {lecturer_name}</H3>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Course Statistics</H5>
        <div style={{ height: "300px" }}>
          <Bar
            data={attendanceChartData}
            options={{ maintainAspectRatio: false }}
          />
        </div>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Your Timetable</H5>
        <Table2 numRows={timetable.length}>
          <Column name="Day" cellRenderer={renderDayCell} />
          <Column name="Time" cellRenderer={renderTimeCell} />
          <Column name="Course" cellRenderer={renderCourseCell} />
          <Column name="Room" cellRenderer={renderRoomCell} />
        </Table2>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Upcoming Classes</H5>
        {upcoming_classes.map((class_, index) => (
          <Card key={index} className="mb-2">
            <H5>{class_.course_name}</H5>
            <p>Day: {class_.day}</p>
            <p>
              Time: {class_.start_time} - {class_.end_time}
            </p>
            <p>Room: {class_.room}</p>
            <Tag intent={Intent.PRIMARY}>Upcoming</Tag>
          </Card>
        ))}
      </Card>
    </div>
  );
};

export default LecturerDashboard;

================================================================================

File: components\LecturerRegistration.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import { Button, FormGroup, InputGroup, Intent, Card } from "@blueprintjs/core";
import { register } from "../api/api";
import { showToast } from "./Toaster";

const LecturerRegistration: React.FC = () => {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    role: "lecturer",
    name: "",
    student_Id: "",
    year: "",
    academic_year: "",
    unit: "",
    group: "",
    semester: "",
  });

  const [faceImages] = useState<File[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const userData = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        userData.append(key, value);
      });
      faceImages.forEach((image, index) => {
        userData.append(`faceImage${index}`, image);
      });

      await register(userData);

      showToast("Registration successful. Please login.", Intent.SUCCESS);
    } catch (error) {
      console.error("Registration failed:", error);
      showToast("Registration failed. Please try again later.", Intent.DANGER);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card elevation={2} className="w-full max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-4">Register</h2>
      <form onSubmit={handleSubmit}>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            name="email"
            type="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            name="password"
            type="password"
            value={formData.password}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Name" labelFor="name-input">
          <InputGroup
            id="name-input"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            required
          />
        </FormGroup>

        <Button
          type="submit"
          intent={Intent.PRIMARY}
          text="Register"
          className="w-full mt-4"
          loading={isLoading}
        />
      </form>
    </Card>
  );
};

export default LecturerRegistration;

================================================================================

File: components\LoadingSpinner.tsx
--------------------------------------------------------------------------------
import React from "react";
import { Spinner, SpinnerSize } from "@blueprintjs/core";

const LoadingSpinner: React.FC = () => (
  <div className="flex justify-center items-center h-screen">
    <Spinner size={SpinnerSize.LARGE} />
  </div>
);

export default LoadingSpinner;

================================================================================

File: components\LoginForm.tsx
--------------------------------------------------------------------------------
import React, { useState } from "react";
import { useSetAtom } from "jotai";
import { useNavigate } from "react-router-dom";
import { Button, FormGroup, InputGroup, Intent, Card } from "@blueprintjs/core";
import { login } from "../api/api";
import { userAtom, isAuthenticatedAtom } from "../store/auth";
import { showToast } from "./Toaster";
const LoginForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const setUser = useSetAtom(userAtom);
  const setIsAuthenticated = useSetAtom(isAuthenticatedAtom);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const userData = await login(email, password);
      setUser(userData);
      setIsAuthenticated(true);
      showToast("Logged in successfully", Intent.SUCCESS);

      // Redirect based on user role
      switch (userData.role) {
        case "student":
          navigate("/student/dashboard");
          break;
        case "lecturer":
          navigate("/lecturer/dashboard");
          break;
        case "admin":
          navigate("/admin/dashboard");
          break;
        default:
          navigate("/");
      }
    } catch (error: any) {
      console.error("Login failed:", error);
      console.log("Login failed:", error.response.data.msg);
      showToast(
        error ? error.response.data.msg : "Login failed. Please try again.",
        Intent.DANGER
      );
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <Card elevation={2} className="w-full max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-4">Login</h2>
      <form onSubmit={handleSubmit}>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </FormGroup>
        <Button
          type="submit"
          intent={Intent.PRIMARY}
          text="Login"
          className="w-full mt-4"
          loading={isLoading}
        />
      </form>
    </Card>
  );
};

export default LoginForm;

================================================================================

File: components\Navbar.tsx
--------------------------------------------------------------------------------
import React from "react";
import { useNavigate } from "react-router-dom";
import {
  Button,
  Navbar,
  Alignment,
  Menu,
  MenuItem,
  Popover,
  Position,
  Tag,
} from "@blueprintjs/core";
import { useAtom } from "jotai";
import { userAtom, isAuthenticatedAtom, darkModeAtom } from "../store/auth";
import { showToast } from "./Toaster";

const AppNavbar: React.FC = () => {
  const [user, setUser] = useAtom(userAtom);
  const [, setIsAuthenticated] = useAtom(isAuthenticatedAtom);
  const [isDarkMode, setIsDarkMode] = useAtom(darkModeAtom);

  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem("token");
    setUser(null);
    setIsAuthenticated(false);
    showToast("Logged out successfully", "success");
    navigate("/login");
  };

  const registrationMenu = (
    <Menu>
      <MenuItem
        icon="new-person"
        text="Register Student"
        // onClick={() => navigate("/admin/register-student")}
        onClick={() => navigate("/register")}
      />
      <MenuItem
        icon="new-person"
        text="Register Lecturer"
        onClick={() => navigate("/admin/register-lecturer")}
      />
      <MenuItem
        icon="new-person"
        text={
          <span>
            Register Admin{" "}
            <Tag minimal intent="warning">
              Temporary
            </Tag>
          </span>
        }
        onClick={() => navigate("/admin/register-admin")}
      />
    </Menu>
  );

  const renderMenu = () => {
    if (!user) return undefined;
    // console.log(user);

    let menuItems;
    switch (user.role) {
      case "student":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/student/dashboard")}
            />
            {/* <MenuItem
              icon="calendar"
              text="Schedule"
              onClick={() => navigate("/student/schedule")}
            />
            <MenuItem
              icon="chart"
              text="Attendance Report"
              onClick={() => navigate("/student/attendance")}
            /> */}
          </Menu>
        );
        break;
      case "lecturer":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/lecturer/dashboard")}
            />
            <MenuItem
              icon="people"
              text="My Courses"
              onClick={() => navigate("/lecturer/courses")}
            />
            <MenuItem
              icon="take-action"
              text="Mark Attendance"
              onClick={() => navigate("/lecturer/mark-attendance")}
            />
          </Menu>
        );
        break;
      case "admin":
        menuItems = (
          <Menu>
            <MenuItem
              icon="dashboard"
              text="Dashboard"
              onClick={() => navigate("/admin/dashboard")}
            />
            <MenuItem
              icon="new-person"
              text="Register Student"
              onClick={() => navigate("/admin/register")}
            />
            <MenuItem
              icon="confirm"
              text="Approve Students"
              onClick={() => navigate("/admin/approve-students")}
            />
            <MenuItem
              icon="new-person"
              text="Register Admin"
              onClick={() => navigate("/admin/register-admin")}
            />
            <MenuItem
              icon="people"
              text="Register Lecturer"
              onClick={() => navigate("/admin/register-lecturer")}
            />
            <MenuItem
              icon="time"
              // Tag with intent warning to indicate temporary feature
              // text="Timetable Management"
              text={
                <span className="flex flex-col">
                  Timetable Management{" "}
                  <Tag minimal intent="danger">
                    Under Construction
                  </Tag>
                </span>
              }
              onClick={() => navigate("/admin/timetable-management")}
            />
          </Menu>
        );
        break;
      default:
        menuItems = undefined;
    }

    return menuItems ? (
      <Popover content={menuItems} position={Position.BOTTOM_RIGHT}>
        <Button
          icon="user"
          rightIcon="caret-down"
          text={
            <span>
              {user.name} <Tag intent="primary">{user.role}</Tag>
            </span>
          }
          className="ml-2"
        />
      </Popover>
    ) : null;
  };

  return (
    <Navbar className="bp3-dark">
      <Navbar.Group align={Alignment.LEFT} className="flex items-center">
        <Navbar.Heading className="text-lg font-bold">
          Attendance System
        </Navbar.Heading>
        <Navbar.Divider />
        {/* <Button
          icon="home"
          text="Home"
          minimal
          onClick={() => navigate("/")}
          className="bp3-minimal"
        /> */}
        <Button
          icon="camera"
          text="Student Portal"
          minimal
          onClick={() => navigate("/student-portal")}
          className="bp3-minimal"
        />
      </Navbar.Group>
      <Navbar.Group align={Alignment.RIGHT} className="flex items-center gap-1">
        {user ? (
          <>
            {renderMenu()}
            <Button
              icon="log-out"
              text="Logout"
              minimal
              onClick={handleLogout}
              className="bp3-minimal"
            />
          </>
        ) : (
          <>
            <Button
              icon="log-in"
              text="Login"
              minimal
              onClick={() => navigate("/login")}
              className="bp3-minimal"
            />
            {/* <Button
              icon="new-person"
              text="Register"
              minimal
              onClick={() => navigate("/register")}
              className="bp3-minimal"
            /> */}

            <Popover
              content={registrationMenu}
              position={Position.BOTTOM_RIGHT}
            >
              <Button
                icon="new-person"
                text="Register"
                // minimal
                rightIcon="caret-down"
                className="bp3-minimal"
              />
            </Popover>
          </>
        )}
        <Button
          icon={isDarkMode ? "flash" : "moon"}
          intent="none"
          onClick={() => setIsDarkMode((prev) => !prev)}
        />
      </Navbar.Group>
    </Navbar>
  );
};

export default AppNavbar;

================================================================================

File: components\PageNotFound.tsx
--------------------------------------------------------------------------------
import React from "react";
import { Callout, Intent } from "@blueprintjs/core";

const PageNotFound: React.FC = () => {
  return (
    <Callout intent={Intent.DANGER} title="Page Not Found" className="mt-4">
      Oops! The page you are looking for does not exist.
    </Callout>
  );
};

export default PageNotFound;

================================================================================

File: components\RegsitrationForm.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Card,
  FormGroup,
  InputGroup,
  Button,
  HTMLSelect,
  Intent,
} from "@blueprintjs/core";
import api, { register } from "../api/api";
import FaceCapture from "./FaceCapture";
import { showToast } from "./Toaster";

interface AcademicYear {
  id: number;
  year: string;
}

interface Semester {
  id: number;
  name: string;
}

interface College {
  id: number;
  name: string;
}

interface Course {
  id: number;
  code: string;
  name: string;
}

const RegistrationForm: React.FC = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    academic_year_id: "",
    semester_id: "",
    college_id: "",
    course_id: "",
    student_id: "",
    role: "student",
  });
  const [academicYears, setAcademicYears] = useState<AcademicYear[]>([]);
  const [semesters, setSemesters] = useState<Semester[]>([]);
  const [colleges, setColleges] = useState<College[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);

  useEffect(() => {
    fetchOptions();
  }, []);

  const fetchOptions = async () => {
    try {
      const [yearsRes, semestersRes, collegesRes, coursesRes] =
        await Promise.all([
          api.get("/academic-years"),
          api.get("/semesters"),
          api.get("/colleges"),
          api.get("/courses"),
        ]);
      setAcademicYears(yearsRes.data);
      setSemesters(semestersRes.data);
      setColleges(collegesRes.data);
      setCourses(coursesRes.data);
    } catch (error) {
      console.error("Error fetching options:", error);
      showToast("Error fetching options", Intent.DANGER);
    }
  };

  const [faceImages, setFaceImages] = useState<File[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleInputChange = (
    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const userData = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        userData.append(key, value.toString());
      });
      faceImages.forEach((image, index) => {
        userData.append(`faceImage${index}`, image);
      });

      console.log("Sending data:", Object.fromEntries(userData));

      await register(userData);

      showToast("Registration successful. Please login.", Intent.SUCCESS);
    } catch (error) {
      console.error("Registration failed:", error);
      showToast("Registration failed. Please try again later.", Intent.DANGER);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card elevation={2} className="registration-form">
      <h2>Student Registration</h2>
      <form onSubmit={handleSubmit}>
        <FormGroup label="Name" labelFor="name-input">
          <InputGroup
            id="name-input"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Email" labelFor="email-input">
          <InputGroup
            id="email-input"
            name="email"
            type="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Password" labelFor="password-input">
          <InputGroup
            id="password-input"
            name="password"
            type="password"
            value={formData.password}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Student ID" labelFor="studentId-input">
          <InputGroup
            id="studentId-input"
            name="student_id"
            value={formData.student_id}
            onChange={handleInputChange}
            required
          />
        </FormGroup>
        <FormGroup label="Academic Year" labelFor="academicYear-select">
          <HTMLSelect
            id="academicYear-select"
            name="academic_year_id"
            value={formData.academic_year_id}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Academic Year</option>
            {academicYears.map((year) => (
              <option key={year.id} value={year.id}>
                {year.year}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Semester" labelFor="semester-select">
          <HTMLSelect
            id="semester-select"
            name="semester_id"
            value={formData.semester_id}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Semester</option>
            {semesters.map((semester) => (
              <option key={semester.id} value={semester.id}>
                {semester.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="College" labelFor="college-select">
          <HTMLSelect
            id="college-select"
            name="college_id"
            value={formData.college_id}
            onChange={handleInputChange}
            required
          >
            <option value="">Select College</option>
            {colleges.map((college) => (
              <option key={college.id} value={college.id}>
                {college.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Course" labelFor="course-select">
          <HTMLSelect
            id="course-select"
            name="course_id"
            value={formData.course_id}
            onChange={handleInputChange}
            required
          >
            <option value="">Select Course</option>
            {courses.map((course) => (
              <option key={course.id} value={course.id}>
                {course.code} - {course.name}
              </option>
            ))}
          </HTMLSelect>
        </FormGroup>
        <FormGroup label="Capture Image" labelFor="image-capture">
          <FaceCapture onCapture={setFaceImages} />
        </FormGroup>
        <Button
          type="submit"
          intent={Intent.PRIMARY}
          text="Register"
          className="w-full mt-4"
          loading={isLoading}
        />
      </form>
    </Card>
  );
};

export default RegistrationForm;

================================================================================

File: components\StudentDashboard.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import {
  Card,
  Elevation,
  H3,
  H5,
  Tag,
  Spinner,
  Intent,
  Callout,
} from "@blueprintjs/core";
import { Cell, Column, Table2 } from "@blueprintjs/table";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import api from "../api/api";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface TimetableEntry {
  day: string;
  start_time: string;
  end_time: string;
  course_name: string;
  lecturer_name: string;
}

interface AttendanceStats {
  total_classes: number;
  classes_attended: number;
  attendance_percentage: number;
}

interface StudentDashboardData {
  student_name: string;
  timetable: TimetableEntry[];
  attendance_stats: AttendanceStats;
  upcoming_classes: TimetableEntry[];
}

const StudentDashboard: React.FC = () => {
  const [dashboardData, setDashboardData] =
    useState<StudentDashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const response = await api.get("/student/dashboard");
      setDashboardData(response.data);
    } catch (err) {
      console.error("Error fetching dashboard data:", err);
      setError("Failed to load dashboard data. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <Spinner size={50} />;
  }

  if (error) {
    return <Callout intent={Intent.DANGER}>{error}</Callout>;
  }

  if (!dashboardData) {
    return (
      <Callout intent={Intent.WARNING}>No dashboard data available.</Callout>
    );
  }

  const { student_name, timetable, attendance_stats, upcoming_classes } =
    dashboardData;

  const attendanceChartData = {
    labels: ["Attended", "Missed"],
    datasets: [
      {
        label: "Classes",
        data: [
          attendance_stats.classes_attended,
          attendance_stats.total_classes - attendance_stats.classes_attended,
        ],
        backgroundColor: ["rgba(75, 192, 192, 0.6)", "rgba(255, 99, 132, 0.6)"],
      },
    ],
  };

  const renderDayCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].day}</Cell>
  );

  const renderTimeCell = (rowIndex: number) => (
    <Cell>{`${timetable[rowIndex].start_time} - ${timetable[rowIndex].end_time}`}</Cell>
  );

  const renderCourseCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].course_name}</Cell>
  );

  const renderLecturerCell = (rowIndex: number) => (
    <Cell>{timetable[rowIndex].lecturer_name}</Cell>
  );

  return (
    <div className="p-4">
      <H3>Welcome, {student_name}</H3>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Attendance Statistics</H5>
        <p>Total Classes: {attendance_stats.total_classes}</p>
        <p>Classes Attended: {attendance_stats.classes_attended}</p>
        <p>
          Attendance Percentage:{" "}
          {attendance_stats.attendance_percentage.toFixed(2)}%
        </p>
        <div style={{ height: "300px" }}>
          <Bar
            data={attendanceChartData}
            options={{ maintainAspectRatio: false }}
          />
        </div>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Your Timetable</H5>
        <Table2 numRows={timetable.length}>
          <Column name="Day" cellRenderer={renderDayCell} />
          <Column name="Time" cellRenderer={renderTimeCell} />
          <Column name="Course" cellRenderer={renderCourseCell} />
          <Column name="Lecturer" cellRenderer={renderLecturerCell} />
        </Table2>
      </Card>

      <Card elevation={Elevation.TWO} className="mt-4">
        <H5>Upcoming Classes</H5>
        {upcoming_classes.map((class_, index) => (
          <Card key={index} className="mb-2">
            <H5>{class_.course_name}</H5>
            <p>Day: {class_.day}</p>
            <p>
              Time: {class_.start_time} - {class_.end_time}
            </p>
            <p>Lecturer: {class_.lecturer_name}</p>
            <Tag intent={Intent.PRIMARY}>Upcoming</Tag>
          </Card>
        ))}
      </Card>
    </div>
  );
};

export default StudentDashboard;

================================================================================

File: components\StudentViewPortal.tsx
--------------------------------------------------------------------------------
import React, { useState, useEffect, useRef } from "react";
import { Card, Callout, H3, H4, Intent, Spinner, Tag } from "@blueprintjs/core";
import api from "../api/api";

interface ClassInfo {
  course: string;
  start_time: string;
  end_time: string;
  room: string;
}

interface NextLecture extends ClassInfo {
  day: string;
  date: string;
  time_until: string;
}

interface WeeklySchedule {
  day: string;
  course: string;
  start_time: string;
  end_time: string;
  room: string;
}

interface AttendanceStatus {
  message: string;
  warning?: string;
  student_name?: string;
  current_time?: string;
  active_session?: ClassInfo | null;
  next_lecture?: NextLecture | null;
  weekly_schedule?: WeeklySchedule[];
}

const StudentViewPortal: React.FC = () => {
  const [attendanceStatus, setAttendanceStatus] =
    useState<AttendanceStatus | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);

  useEffect(() => {
    startCamera();
    return () => {
      stopCamera();
    };
  }, []);

  useEffect(() => {
    const intervalId = setInterval(captureAndSendImage, 2000); // Capture every 5 seconds
    return () => clearInterval(intervalId);
  }, []);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      streamRef.current = stream;
    } catch (err) {
      console.error("Failed to start camera:", err);
      setError("Failed to start camera. Please check your permissions.");
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
  };

  const captureAndSendImage = () => {
    if (videoRef.current && canvasRef.current && !isProcessing) {
      const context = canvasRef.current.getContext("2d");
      if (context) {
        context.drawImage(
          videoRef.current,
          0,
          0,
          canvasRef.current.width,
          canvasRef.current.height
        );
        const imageData = canvasRef.current.toDataURL("image/jpeg");
        sendImageToBackend(imageData);
      }
    }
  };

  const sendImageToBackend = async (imageData: string) => {
    try {
      setIsProcessing(true);
      setError(null);
      const response = await api.post("/check-attendance", {
        image: imageData,
      });
      setAttendanceStatus(response.data);
    } catch (err: any) {
      console.error("Error processing attendance:", err);
      setError(
        err.response?.data?.error ||
          "Failed to process attendance. Please try again."
      );
      setAttendanceStatus(null);
    } finally {
      setIsProcessing(false);
    }
  };

  const getCalloutIntent = (status: AttendanceStatus): Intent => {
    if (status.warning) return Intent.WARNING;
    if (
      status.message.includes("Session ended") ||
      status.message.includes("Attendance recorded")
    ) {
      return Intent.SUCCESS;
    } else if (
      status.message.includes("Active session") ||
      status.message.includes("Next class starts in")
    ) {
      return Intent.PRIMARY;
    } else {
      return Intent.NONE;
    }
  };

  const renderAttendanceStatus = () => {
    if (!attendanceStatus) return null;

    return (
      <Callout
        intent={getCalloutIntent(attendanceStatus)}
        title="Attendance Status"
        className="mb-4"
      >
        {attendanceStatus.warning ? (
          <p>{attendanceStatus.warning}</p>
        ) : (
          <>
            {attendanceStatus.student_name && (
              <H3>{attendanceStatus.student_name}</H3>
            )}
            {attendanceStatus.current_time && (
              <p>Current Time: {attendanceStatus.current_time}</p>
            )}
            <p>{attendanceStatus.message}</p>

            {attendanceStatus.active_session && (
              <div>
                <H4>Active Session</H4>
                <p>Course: {attendanceStatus.active_session.course}</p>
                <p>Start Time: {attendanceStatus.active_session.start_time}</p>
                <p>End Time: {attendanceStatus.active_session.end_time}</p>
                <p>Room: {attendanceStatus.active_session.room}</p>
              </div>
            )}

            {attendanceStatus.next_lecture && (
              <div>
                <H4>Next Scheduled Lecture</H4>
                <p>Course: {attendanceStatus.next_lecture.course}</p>
                <p>Day: {attendanceStatus.next_lecture.day}</p>
                <p>Date: {attendanceStatus.next_lecture.date}</p>
                <p>Start Time: {attendanceStatus.next_lecture.start_time}</p>
                <p>End Time: {attendanceStatus.next_lecture.end_time}</p>
                <p>Room: {attendanceStatus.next_lecture.room}</p>
                <p>
                  Time Until:{" "}
                  <Tag intent={Intent.WARNING}>
                    {attendanceStatus.next_lecture.time_until}
                  </Tag>
                </p>
              </div>
            )}

            {attendanceStatus.weekly_schedule &&
              attendanceStatus.weekly_schedule.length > 0 && (
                <>
                  <H4>Weekly Schedule</H4>
                  {attendanceStatus.weekly_schedule.map((class_, index) => (
                    <div key={index} className="mb-2">
                      <p>
                        <strong>{class_.day}</strong>: {class_.course} (
                        {class_.start_time} - {class_.end_time}) Room:{" "}
                        {class_.room}
                      </p>
                    </div>
                  ))}
                </>
              )}
          </>
        )}
      </Callout>
    );
  };

  return (
    <div className="p-4">
      <Card elevation={2}>
        <H3>Attendance Check-In Portal</H3>
        {error && (
          <Callout intent={Intent.DANGER} title="Error" className="mb-4">
            {error}
          </Callout>
        )}
        {renderAttendanceStatus()}
        <div className="mb-4 relative">
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            style={{ width: "100%", maxWidth: "640px" }}
          />
          {isProcessing && (
            <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50">
              <Spinner intent={Intent.PRIMARY} size={50} />
            </div>
          )}
        </div>
        <canvas
          ref={canvasRef}
          style={{ display: "none" }}
          width={640}
          height={480}
        />
      </Card>
    </div>
  );
};

export default StudentViewPortal;

================================================================================

File: components\Toaster.ts
--------------------------------------------------------------------------------
import { Position, Intent, OverlayToaster } from "@blueprintjs/core";

export const AppToaster = OverlayToaster.createAsync({
  className: "app-toaster",
  position: Position.TOP,
});

export const showToast = async (
  message: string,
  intent: Intent = Intent.PRIMARY
) => {
  (await AppToaster).show({ message, intent });
};

================================================================================

File: store\auth.ts
--------------------------------------------------------------------------------
import { atom } from "jotai";
import { jwtDecode } from "jwt-decode";

export interface User {
  id: string;
  name: string;
  email: string;
  role: "student" | "lecturer" | "admin";
}

const token = localStorage.getItem("token");
const initialUser = token ? (jwtDecode(token) as User) : null;

export const userAtom = atom<User | null>(initialUser);
export const isAuthenticatedAtom = atom<boolean>(!!initialUser);
export const darkModeAtom = atom(false);

================================================================================

File: store\dashboardStore.ts
--------------------------------------------------------------------------------
import { atom } from "jotai";

export const dashboardLoadingAtom = atom<boolean>(false);
export const dashboardErrorAtom = atom<string | null>(null);

================================================================================

File: utils\sessionManager.ts
--------------------------------------------------------------------------------
import { jwtDecode } from "jwt-decode";
import { userAtom } from "../store/auth";
import { useSetAtom } from "jotai";

interface DecodedToken {
  exp: number;
}

export const checkSessionExpiration = () => {
  const token = localStorage.getItem("token");
  if (token) {
    const decodedToken = jwtDecode(token) as DecodedToken;
    const currentTime = Date.now() / 1000;

    if (decodedToken.exp < currentTime) {
      // Token has expired
      return true;
    }
  }
  return false;
};

export const useLogout = () => {
  const setUser = useSetAtom(userAtom);

  return () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setUser(null);
  };
};

================================================================================

